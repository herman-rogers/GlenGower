/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

namespace Noesis
{

public class KeySpline : Freezable {

  internal KeySpline(IntPtr cPtr, bool cMemoryOwn) : base(NoesisGUI_PINVOKE.KeySpline_SWIGUpcast(cPtr), cMemoryOwn) {
  }

  internal static HandleRef getCPtr(KeySpline obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  public KeySpline() {
  }

  protected override System.IntPtr CreateCPtr(System.Type type) {
    if (type == typeof(KeySpline)) {
      return NoesisGUI_PINVOKE.new_KeySpline__SWIG_0();
    }
    else {
      return base.CreateCPtr(type);
    }
  }

  public KeySpline(Point controlPoint1, Point controlPoint2) : this(NoesisGUI_PINVOKE.new_KeySpline__SWIG_1(controlPoint1, controlPoint2), true) {
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public KeySpline(float controlPoint1X, float controlPoint1Y, float controlPoint2X, float controlPoint2Y) : this(NoesisGUI_PINVOKE.new_KeySpline__SWIG_2(controlPoint1X, controlPoint1Y, controlPoint2X, controlPoint2Y), true) {
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public float GetSplineProgress(float linearProgress) {
    float ret = NoesisGUI_PINVOKE.KeySpline_GetSplineProgress(swigCPtr, linearProgress);
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public Point ControlPoint1 {
    set {
      NoesisGUI_PINVOKE.KeySpline_ControlPoint1_set(swigCPtr, value);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    }

    get {
      IntPtr ret = NoesisGUI_PINVOKE.KeySpline_ControlPoint1_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      if (ret != IntPtr.Zero) {
        Point jret = Marshal.PtrToStructure<Point>(ret);
        return jret;
      }
      else {
        return new Point();
      }
    }

  }

  public Point ControlPoint2 {
    set {
      NoesisGUI_PINVOKE.KeySpline_ControlPoint2_set(swigCPtr, value);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    }

    get {
      IntPtr ret = NoesisGUI_PINVOKE.KeySpline_ControlPoint2_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      if (ret != IntPtr.Zero) {
        Point jret = Marshal.PtrToStructure<Point>(ret);
        return jret;
      }
      else {
        return new Point();
      }
    }

  }

  new internal static IntPtr GetStaticType() {
    IntPtr ret = NoesisGUI_PINVOKE.KeySpline_GetStaticType();
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

}

}

