/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

namespace Noesis
{

public class ToggleButton : ButtonBase {

  internal ToggleButton(IntPtr cPtr, bool cMemoryOwn) : base(NoesisGUI_PINVOKE.ToggleButton_SWIGUpcast(cPtr), cMemoryOwn) {
  }

  internal static HandleRef getCPtr(ToggleButton obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }


  public delegate void CheckedHandler(object sender, RoutedEventArgs e);
  public event CheckedHandler Checked {
    add {
      if (!_Checked.ContainsKey(swigCPtr.Handle)) {
        _Checked.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_ToggleButton_Checked(_raiseChecked, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif
      }

      _Checked[swigCPtr.Handle] += value;
    }
    remove {
      if (!_Checked.ContainsKey(swigCPtr.Handle)) {
        throw new System.Exception("Delegate not found");
      }

      _Checked[swigCPtr.Handle] -= value;

      if (_Checked[swigCPtr.Handle] == null) {
        NoesisGUI_PINVOKE.UnbindEvent_ToggleButton_Checked(_raiseChecked, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif

        _Checked.Remove(swigCPtr.Handle);
      }
    }
  }

  internal delegate void RaiseCheckedCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaiseCheckedCallback _raiseChecked = RaiseChecked;

  [MonoPInvokeCallback(typeof(RaiseCheckedCallback))]
  private static void RaiseChecked(IntPtr cPtr, IntPtr sender, IntPtr e) {
    if (!_Checked.ContainsKey(cPtr)) {
      throw new System.Exception("Delegate not found");
    }
    if (sender == System.IntPtr.Zero && e == System.IntPtr.Zero) {
      _Checked.Remove(cPtr);
      return;
    }
    CheckedHandler handler = _Checked[cPtr];
    if (handler != null) {
      handler(Noesis.Extend.Unbox(Noesis.Extend.GetProxy(sender, false)), new RoutedEventArgs(e, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, CheckedHandler> _Checked =
      new System.Collections.Generic.Dictionary<System.IntPtr, CheckedHandler>();


  public delegate void IndeterminateHandler(object sender, RoutedEventArgs e);
  public event IndeterminateHandler Indeterminate {
    add {
      if (!_Indeterminate.ContainsKey(swigCPtr.Handle)) {
        _Indeterminate.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_ToggleButton_Indeterminate(_raiseIndeterminate, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif
      }

      _Indeterminate[swigCPtr.Handle] += value;
    }
    remove {
      if (!_Indeterminate.ContainsKey(swigCPtr.Handle)) {
        throw new System.Exception("Delegate not found");
      }

      _Indeterminate[swigCPtr.Handle] -= value;

      if (_Indeterminate[swigCPtr.Handle] == null) {
        NoesisGUI_PINVOKE.UnbindEvent_ToggleButton_Indeterminate(_raiseIndeterminate, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif

        _Indeterminate.Remove(swigCPtr.Handle);
      }
    }
  }

  internal delegate void RaiseIndeterminateCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaiseIndeterminateCallback _raiseIndeterminate = RaiseIndeterminate;

  [MonoPInvokeCallback(typeof(RaiseIndeterminateCallback))]
  private static void RaiseIndeterminate(IntPtr cPtr, IntPtr sender, IntPtr e) {
    if (!_Indeterminate.ContainsKey(cPtr)) {
      throw new System.Exception("Delegate not found");
    }
    if (sender == System.IntPtr.Zero && e == System.IntPtr.Zero) {
      _Indeterminate.Remove(cPtr);
      return;
    }
    IndeterminateHandler handler = _Indeterminate[cPtr];
    if (handler != null) {
      handler(Noesis.Extend.Unbox(Noesis.Extend.GetProxy(sender, false)), new RoutedEventArgs(e, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, IndeterminateHandler> _Indeterminate =
      new System.Collections.Generic.Dictionary<System.IntPtr, IndeterminateHandler>();


  public delegate void UncheckedHandler(object sender, RoutedEventArgs e);
  public event UncheckedHandler Unchecked {
    add {
      if (!_Unchecked.ContainsKey(swigCPtr.Handle)) {
        _Unchecked.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_ToggleButton_Unchecked(_raiseUnchecked, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif
      }

      _Unchecked[swigCPtr.Handle] += value;
    }
    remove {
      if (!_Unchecked.ContainsKey(swigCPtr.Handle)) {
        throw new System.Exception("Delegate not found");
      }

      _Unchecked[swigCPtr.Handle] -= value;

      if (_Unchecked[swigCPtr.Handle] == null) {
        NoesisGUI_PINVOKE.UnbindEvent_ToggleButton_Unchecked(_raiseUnchecked, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif

        _Unchecked.Remove(swigCPtr.Handle);
      }
    }
  }

  internal delegate void RaiseUncheckedCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaiseUncheckedCallback _raiseUnchecked = RaiseUnchecked;

  [MonoPInvokeCallback(typeof(RaiseUncheckedCallback))]
  private static void RaiseUnchecked(IntPtr cPtr, IntPtr sender, IntPtr e) {
    if (!_Unchecked.ContainsKey(cPtr)) {
      throw new System.Exception("Delegate not found");
    }
    if (sender == System.IntPtr.Zero && e == System.IntPtr.Zero) {
      _Unchecked.Remove(cPtr);
      return;
    }
    UncheckedHandler handler = _Unchecked[cPtr];
    if (handler != null) {
      handler(Noesis.Extend.Unbox(Noesis.Extend.GetProxy(sender, false)), new RoutedEventArgs(e, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, UncheckedHandler> _Unchecked =
      new System.Collections.Generic.Dictionary<System.IntPtr, UncheckedHandler>();


  public ToggleButton() {
  }

  protected override System.IntPtr CreateCPtr(System.Type type) {
    if (type == typeof(ToggleButton)) {
      return NoesisGUI_PINVOKE.new_ToggleButton();
    }
    else {
      return base.CreateCPtr(type);
    }
  }

  public static DependencyProperty IsCheckedProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.ToggleButton_IsCheckedProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty IsThreeStateProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.ToggleButton_IsThreeStateProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public System.Nullable<bool> IsChecked {
  set {
    NoesisGUI_PINVOKE.ToggleButton_IsChecked_set(swigCPtr, value);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
  }

  get {
    IntPtr ret = NoesisGUI_PINVOKE.ToggleButton_IsChecked_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    if (ret != IntPtr.Zero) {
      return Marshal.PtrToStructure<NullableBool>(ret);
    }
    else {
      return new System.Nullable<bool>();
    }
  }

  }

  public bool IsThreeState {
    set {
      NoesisGUI_PINVOKE.ToggleButton_IsThreeState_set(swigCPtr, value);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      bool ret = NoesisGUI_PINVOKE.ToggleButton_IsThreeState_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  new internal static IntPtr GetStaticType() {
    IntPtr ret = NoesisGUI_PINVOKE.ToggleButton_GetStaticType();
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }


  internal new static IntPtr Extend(System.Type type) {
    IntPtr unityType = Noesis.Extend.GetPtrForType(type);
    IntPtr nativeType = NoesisGUI_PINVOKE.Extend_ToggleButton(unityType);
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return nativeType;
  }
}

}

