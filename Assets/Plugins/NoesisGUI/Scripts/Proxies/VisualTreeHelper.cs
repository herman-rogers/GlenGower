/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

namespace Noesis
{

public static class VisualTreeHelper {
  public static Visual GetRoot(Visual visual) {
    IntPtr cPtr = NoesisGUI_PINVOKE.VisualTreeHelper_GetRoot(Visual.getCPtr(visual));
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return Noesis.Extend.GetProxy(cPtr, false) as Visual;
  }

  public static Visual GetParent(Visual visual) {
    IntPtr cPtr = NoesisGUI_PINVOKE.VisualTreeHelper_GetParent(Visual.getCPtr(visual));
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return Noesis.Extend.GetProxy(cPtr, false) as Visual;
  }

  public static uint GetChildrenCount(Visual visual) {
    uint ret = NoesisGUI_PINVOKE.VisualTreeHelper_GetChildrenCount(Visual.getCPtr(visual));
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public static Visual GetChild(Visual visual, uint childIndex) {
    IntPtr cPtr = NoesisGUI_PINVOKE.VisualTreeHelper_GetChild(Visual.getCPtr(visual), childIndex);
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return Noesis.Extend.GetProxy(cPtr, false) as Visual;
  }

  public static Rect GetContentBounds(Visual visual) {
    IntPtr ret = NoesisGUI_PINVOKE.VisualTreeHelper_GetContentBounds(Visual.getCPtr(visual));
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    if (ret != IntPtr.Zero) {
      Rect jret = Marshal.PtrToStructure<Rect>(ret);
      NoesisGUI_PINVOKE.Rect_Delete(ret);
      return jret;
    }
    else {
      return new Rect();
    }
  }

  public static Rect GetDescendantBounds(Visual visual) {
    IntPtr ret = NoesisGUI_PINVOKE.VisualTreeHelper_GetDescendantBounds(Visual.getCPtr(visual));
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    if (ret != IntPtr.Zero) {
      Rect jret = Marshal.PtrToStructure<Rect>(ret);
      NoesisGUI_PINVOKE.Rect_Delete(ret);
      return jret;
    }
    else {
      return new Rect();
    }
  }

  public static Point GetOffset(Visual visual) {
    IntPtr ret = NoesisGUI_PINVOKE.VisualTreeHelper_GetOffset(Visual.getCPtr(visual));
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    if (ret != IntPtr.Zero) {
      Point jret = Marshal.PtrToStructure<Point>(ret);
      return jret;
    }
    else {
      return new Point();
    }
  }

  public static Size GetSize(Visual visual) {
    IntPtr ret = NoesisGUI_PINVOKE.VisualTreeHelper_GetSize(Visual.getCPtr(visual));
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    if (ret != IntPtr.Zero) {
      Size jret = Marshal.PtrToStructure<Size>(ret);
      return jret;
    }
    else {
      return new Size();
    }
  }

  public static Geometry GetClip(Visual visual) {
    IntPtr cPtr = NoesisGUI_PINVOKE.VisualTreeHelper_GetClip(Visual.getCPtr(visual));
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return Noesis.Extend.GetProxy(cPtr, false) as Geometry;
  }

  public static HitTestResult HitTest(Visual visual, Point point) {
    HitTestResult ret = new HitTestResult(NoesisGUI_PINVOKE.VisualTreeHelper_HitTest__SWIG_0(Visual.getCPtr(visual), point), true);
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

}

}

