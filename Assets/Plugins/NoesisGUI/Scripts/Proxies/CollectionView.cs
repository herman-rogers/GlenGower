/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

namespace Noesis
{

public class CollectionView : BaseComponent {

  internal CollectionView(IntPtr cPtr, bool cMemoryOwn) : base(NoesisGUI_PINVOKE.CollectionView_SWIGUpcast(cPtr), cMemoryOwn) {
  }

  internal static HandleRef getCPtr(CollectionView obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  public CollectionView() {
  }

  protected override System.IntPtr CreateCPtr(System.Type type) {
    if (type == typeof(CollectionView)) {
      return NoesisGUI_PINVOKE.new_CollectionView__SWIG_0();
    }
    else {
      return base.CreateCPtr(type);
    }
  }

  public bool IsCurrentAfterLast() {
    bool ret = NoesisGUI_PINVOKE.CollectionView_IsCurrentAfterLast(swigCPtr);
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public bool IsCurrentBeforeFirst() {
    bool ret = NoesisGUI_PINVOKE.CollectionView_IsCurrentBeforeFirst(swigCPtr);
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public bool IsEmpty() {
    bool ret = NoesisGUI_PINVOKE.CollectionView_IsEmpty(swigCPtr);
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public bool MoveCurrentToFirst() {
    bool ret = NoesisGUI_PINVOKE.CollectionView_MoveCurrentToFirst(swigCPtr);
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public bool MoveCurrentToLast() {
    bool ret = NoesisGUI_PINVOKE.CollectionView_MoveCurrentToLast(swigCPtr);
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public bool MoveCurrentToNext() {
    bool ret = NoesisGUI_PINVOKE.CollectionView_MoveCurrentToNext(swigCPtr);
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public bool MoveCurrentToPosition(int position) {
    bool ret = NoesisGUI_PINVOKE.CollectionView_MoveCurrentToPosition(swigCPtr, position);
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public bool MoveCurrentToPrevious() {
    bool ret = NoesisGUI_PINVOKE.CollectionView_MoveCurrentToPrevious(swigCPtr);
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void Refresh() {
    NoesisGUI_PINVOKE.CollectionView_Refresh(swigCPtr);
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public bool CanFilter {
    get {
      bool ret = NoesisGUI_PINVOKE.CollectionView_CanFilter_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public bool CanGroup {
    get {
      bool ret = NoesisGUI_PINVOKE.CollectionView_CanGroup_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public bool CanSort {
    get {
      bool ret = NoesisGUI_PINVOKE.CollectionView_CanSort_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public object CurrentItem {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.CollectionView_CurrentItem_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return Noesis.Extend.Unbox(Noesis.Extend.GetProxy(cPtr, false));
    }

  }

  public int CurrentPosition {
    get {
      int ret = NoesisGUI_PINVOKE.CollectionView_CurrentPosition_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  new internal static IntPtr GetStaticType() {
    IntPtr ret = NoesisGUI_PINVOKE.CollectionView_GetStaticType();
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

}

}

