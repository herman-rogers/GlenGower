/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

namespace Noesis
{

public class VisualStateGroup : DependencyObject {

  internal VisualStateGroup(IntPtr cPtr, bool cMemoryOwn) : base(NoesisGUI_PINVOKE.VisualStateGroup_SWIGUpcast(cPtr), cMemoryOwn) {
  }

  internal static HandleRef getCPtr(VisualStateGroup obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  public VisualStateGroup() {
  }

  protected override System.IntPtr CreateCPtr(System.Type type) {
    if (type == typeof(VisualStateGroup)) {
      return NoesisGUI_PINVOKE.new_VisualStateGroup();
    }
    else {
      return base.CreateCPtr(type);
    }
  }

  public VisualState GetCurrentState(FrameworkElement fe) {
    IntPtr cPtr = NoesisGUI_PINVOKE.VisualStateGroup_GetCurrentState(swigCPtr, FrameworkElement.getCPtr(fe));
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return Noesis.Extend.GetProxy(cPtr, false) as VisualState;
  }

  public void SetCurrentState(FrameworkElement fe, VisualState state) {
    NoesisGUI_PINVOKE.VisualStateGroup_SetCurrentState(swigCPtr, FrameworkElement.getCPtr(fe), VisualState.getCPtr(state));
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public VisualState FindState(string name) {
    IntPtr cPtr = NoesisGUI_PINVOKE.VisualStateGroup_FindState(swigCPtr, name != null ? name : string.Empty);
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return Noesis.Extend.GetProxy(cPtr, false) as VisualState;
  }

  public VisualTransition FindTransition(VisualState from, VisualState to) {
    IntPtr cPtr = NoesisGUI_PINVOKE.VisualStateGroup_FindTransition(swigCPtr, VisualState.getCPtr(from), VisualState.getCPtr(to));
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return Noesis.Extend.GetProxy(cPtr, false) as VisualTransition;
  }

  public void UpdateAnimations(FrameworkElement fe, Storyboard storyboard1, Storyboard storyboard2) {
    NoesisGUI_PINVOKE.VisualStateGroup_UpdateAnimations__SWIG_0(swigCPtr, FrameworkElement.getCPtr(fe), Storyboard.getCPtr(storyboard1), Storyboard.getCPtr(storyboard2));
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public void UpdateAnimations(FrameworkElement fe, Storyboard storyboard1) {
    NoesisGUI_PINVOKE.VisualStateGroup_UpdateAnimations__SWIG_1(swigCPtr, FrameworkElement.getCPtr(fe), Storyboard.getCPtr(storyboard1));
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public string Name {
  get {
    string ret = NoesisGUI_PINVOKE.VisualStateGroup_Name_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    return ret;
  }

  }

  public VisualStateCollection States {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.VisualStateGroup_States_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return Noesis.Extend.GetProxy(cPtr, false) as VisualStateCollection;
    }
  
  }

  public VisualTransitionCollection Transitions {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.VisualStateGroup_Transitions_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return Noesis.Extend.GetProxy(cPtr, false) as VisualTransitionCollection;
    }
  
  }

  new internal static IntPtr GetStaticType() {
    IntPtr ret = NoesisGUI_PINVOKE.VisualStateGroup_GetStaticType();
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

}

}

