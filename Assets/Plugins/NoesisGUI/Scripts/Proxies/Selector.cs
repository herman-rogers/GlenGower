/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

namespace Noesis
{

public class Selector : ItemsControl {

  internal Selector(IntPtr cPtr, bool cMemoryOwn) : base(NoesisGUI_PINVOKE.Selector_SWIGUpcast(cPtr), cMemoryOwn) {
  }

  internal static HandleRef getCPtr(Selector obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  protected Selector() {
  }


  public delegate void SelectionChangedHandler(object sender, SelectionChangedEventArgs e);
  public event SelectionChangedHandler SelectionChanged {
    add {
      if (!_SelectionChanged.ContainsKey(swigCPtr.Handle)) {
        _SelectionChanged.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_Selector_SelectionChanged(_raiseSelectionChanged, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif
      }

      _SelectionChanged[swigCPtr.Handle] += value;
    }
    remove {
      if (!_SelectionChanged.ContainsKey(swigCPtr.Handle)) {
        throw new System.Exception("Delegate not found");
      }

      _SelectionChanged[swigCPtr.Handle] -= value;

      if (_SelectionChanged[swigCPtr.Handle] == null) {
        NoesisGUI_PINVOKE.UnbindEvent_Selector_SelectionChanged(_raiseSelectionChanged, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif

        _SelectionChanged.Remove(swigCPtr.Handle);
      }
    }
  }

  internal delegate void RaiseSelectionChangedCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaiseSelectionChangedCallback _raiseSelectionChanged = RaiseSelectionChanged;

  [MonoPInvokeCallback(typeof(RaiseSelectionChangedCallback))]
  private static void RaiseSelectionChanged(IntPtr cPtr, IntPtr sender, IntPtr e) {
    if (!_SelectionChanged.ContainsKey(cPtr)) {
      throw new System.Exception("Delegate not found");
    }
    if (sender == System.IntPtr.Zero && e == System.IntPtr.Zero) {
      _SelectionChanged.Remove(cPtr);
      return;
    }
    SelectionChangedHandler handler = _SelectionChanged[cPtr];
    if (handler != null) {
      handler(Noesis.Extend.Unbox(Noesis.Extend.GetProxy(sender, false)), new SelectionChangedEventArgs(e, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, SelectionChangedHandler> _SelectionChanged =
      new System.Collections.Generic.Dictionary<System.IntPtr, SelectionChangedHandler>();


  public static bool GetIsSelected(DependencyObject element) {
    bool ret = NoesisGUI_PINVOKE.Selector_GetIsSelected(DependencyObject.getCPtr(element));
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public static void SetIsSelected(DependencyObject element, bool value) {
    NoesisGUI_PINVOKE.Selector_SetIsSelected(DependencyObject.getCPtr(element), value);
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public static bool GetIsSelectionActive(UIElement element) {
    bool ret = NoesisGUI_PINVOKE.Selector_GetIsSelectionActive(UIElement.getCPtr(element));
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public static DependencyProperty IsSelectedProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Selector_IsSelectedProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty IsSelectionActiveProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Selector_IsSelectionActiveProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty IsSynchronizedWithCurrentItemProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Selector_IsSynchronizedWithCurrentItemProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty SelectedIndexProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Selector_SelectedIndexProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty SelectedItemProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Selector_SelectedItemProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public System.Nullable<bool> IsSynchronizedWithCurrentItem {
  set {
    NoesisGUI_PINVOKE.Selector_IsSynchronizedWithCurrentItem_set(swigCPtr, value);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
  }

  get {
    IntPtr ret = NoesisGUI_PINVOKE.Selector_IsSynchronizedWithCurrentItem_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    if (ret != IntPtr.Zero) {
      return Marshal.PtrToStructure<NullableBool>(ret);
    }
    else {
      return new System.Nullable<bool>();
    }
  }

  }

  public int SelectedIndex {
    set {
      NoesisGUI_PINVOKE.Selector_SelectedIndex_set(swigCPtr, value);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      int ret = NoesisGUI_PINVOKE.Selector_SelectedIndex_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public object SelectedItem {
    set {
      NoesisGUI_PINVOKE.Selector_SelectedItem_set(swigCPtr, Noesis.Extend.GetInstanceHandle(value));
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    }

    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Selector_SelectedItem_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return Noesis.Extend.Unbox(Noesis.Extend.GetProxy(cPtr, false));
    }

  }

  new internal static IntPtr GetStaticType() {
    IntPtr ret = NoesisGUI_PINVOKE.Selector_GetStaticType();
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }


  internal new static IntPtr Extend(System.Type type) {
    IntPtr unityType = Noesis.Extend.GetPtrForType(type);
    IntPtr nativeType = NoesisGUI_PINVOKE.Extend_Selector(unityType);
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return nativeType;
  }
}

}

