/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

namespace Noesis
{

public class TreeView : ItemsControl {

  internal TreeView(IntPtr cPtr, bool cMemoryOwn) : base(NoesisGUI_PINVOKE.TreeView_SWIGUpcast(cPtr), cMemoryOwn) {
  }

  internal static HandleRef getCPtr(TreeView obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  public TreeView() {
  }

  protected override System.IntPtr CreateCPtr(System.Type type) {
    if (type == typeof(TreeView)) {
      return NoesisGUI_PINVOKE.new_TreeView();
    }
    else {
      return base.CreateCPtr(type);
    }
  }

  public void ItemClicked(TreeViewItem tvi) {
    NoesisGUI_PINVOKE.TreeView_ItemClicked(swigCPtr, TreeViewItem.getCPtr(tvi));
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public void ItemExpanded(TreeViewItem tvi) {
    NoesisGUI_PINVOKE.TreeView_ItemExpanded(swigCPtr, TreeViewItem.getCPtr(tvi));
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public static DependencyProperty SelectedItemProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.TreeView_SelectedItemProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public object SelectedItem {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.TreeView_SelectedItem_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return Noesis.Extend.Unbox(Noesis.Extend.GetProxy(cPtr, false));
    }

  }

  new internal static IntPtr GetStaticType() {
    IntPtr ret = NoesisGUI_PINVOKE.TreeView_GetStaticType();
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public delegate void SelectedItemChangedHandler(object oldValue, object newValue);
  public event SelectedItemChangedHandler SelectedItemChanged
  {
    add
    {
      if (!_SelectedItemChanged.ContainsKey(swigCPtr.Handle))
      {
        _SelectedItemChanged.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_TreeView_SelectedItemChanged(_raiseSelectedItemChanged, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif
      }

      _SelectedItemChanged[swigCPtr.Handle] += value;
    }
    remove
    {
      if (!_SelectedItemChanged.ContainsKey(swigCPtr.Handle))
      {
        throw new System.Exception("Delegate not found");
      }

      _SelectedItemChanged[swigCPtr.Handle] -= value;

      if (_SelectedItemChanged[swigCPtr.Handle] == null)
      {
        NoesisGUI_PINVOKE.UnbindEvent_TreeView_SelectedItemChanged(_raiseSelectedItemChanged, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif

        _SelectedItemChanged.Remove(swigCPtr.Handle);
      }
    }
  }

  internal delegate void RaiseSelectedItemChangedCallback(IntPtr cPtr, IntPtr oldValue, IntPtr newValue);
  private static RaiseSelectedItemChangedCallback _raiseSelectedItemChanged = RaiseSelectedItemChanged;

  [MonoPInvokeCallback(typeof(RaiseSelectedItemChangedCallback))]
  private static void RaiseSelectedItemChanged(IntPtr cPtr, IntPtr oldValue, IntPtr newValue)
  {
    if (!_SelectedItemChanged.ContainsKey(cPtr))
    {
      throw new System.Exception("Delegate not found");
    }
    if (oldValue == System.IntPtr.Zero && newValue == System.IntPtr.Zero) {
      _SelectedItemChanged.Remove(cPtr);
      return;
    }
    SelectedItemChangedHandler handler = _SelectedItemChanged[cPtr];
    if (handler != null)
    {
      handler(Noesis.Extend.Unbox(Noesis.Extend.GetProxy(oldValue, false)), Noesis.Extend.Unbox(Noesis.Extend.GetProxy(newValue, false)));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, SelectedItemChangedHandler> _SelectedItemChanged =
      new System.Collections.Generic.Dictionary<System.IntPtr, SelectedItemChangedHandler>();


  internal new static IntPtr Extend(System.Type type) {
    IntPtr unityType = Noesis.Extend.GetPtrForType(type);
    IntPtr nativeType = NoesisGUI_PINVOKE.Extend_TreeView(unityType);
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return nativeType;
  }
}

}

