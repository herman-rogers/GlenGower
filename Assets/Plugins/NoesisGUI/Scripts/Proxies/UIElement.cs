/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

namespace Noesis
{

public class UIElement : Visual {

  internal UIElement(IntPtr cPtr, bool cMemoryOwn) : base(NoesisGUI_PINVOKE.UIElement_SWIGUpcast(cPtr), cMemoryOwn) {
  }

  internal static HandleRef getCPtr(UIElement obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }


  public delegate void DragEnterHandler(object sender, DragEventArgs e);
  public event DragEnterHandler DragEnter {
    add {
      if (!_DragEnter.ContainsKey(swigCPtr.Handle)) {
        _DragEnter.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_UIElement_DragEnter(_raiseDragEnter, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif
      }

      _DragEnter[swigCPtr.Handle] += value;
    }
    remove {
      if (!_DragEnter.ContainsKey(swigCPtr.Handle)) {
        throw new System.Exception("Delegate not found");
      }

      _DragEnter[swigCPtr.Handle] -= value;

      if (_DragEnter[swigCPtr.Handle] == null) {
        NoesisGUI_PINVOKE.UnbindEvent_UIElement_DragEnter(_raiseDragEnter, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif

        _DragEnter.Remove(swigCPtr.Handle);
      }
    }
  }

  internal delegate void RaiseDragEnterCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaiseDragEnterCallback _raiseDragEnter = RaiseDragEnter;

  [MonoPInvokeCallback(typeof(RaiseDragEnterCallback))]
  private static void RaiseDragEnter(IntPtr cPtr, IntPtr sender, IntPtr e) {
    if (!_DragEnter.ContainsKey(cPtr)) {
      throw new System.Exception("Delegate not found");
    }
    if (sender == System.IntPtr.Zero && e == System.IntPtr.Zero) {
      _DragEnter.Remove(cPtr);
      return;
    }
    DragEnterHandler handler = _DragEnter[cPtr];
    if (handler != null) {
      handler(Noesis.Extend.Unbox(Noesis.Extend.GetProxy(sender, false)), new DragEventArgs(e, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, DragEnterHandler> _DragEnter =
      new System.Collections.Generic.Dictionary<System.IntPtr, DragEnterHandler>();


  public delegate void DragLeaveHandler(object sender, DragEventArgs e);
  public event DragLeaveHandler DragLeave {
    add {
      if (!_DragLeave.ContainsKey(swigCPtr.Handle)) {
        _DragLeave.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_UIElement_DragLeave(_raiseDragLeave, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif
      }

      _DragLeave[swigCPtr.Handle] += value;
    }
    remove {
      if (!_DragLeave.ContainsKey(swigCPtr.Handle)) {
        throw new System.Exception("Delegate not found");
      }

      _DragLeave[swigCPtr.Handle] -= value;

      if (_DragLeave[swigCPtr.Handle] == null) {
        NoesisGUI_PINVOKE.UnbindEvent_UIElement_DragLeave(_raiseDragLeave, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif

        _DragLeave.Remove(swigCPtr.Handle);
      }
    }
  }

  internal delegate void RaiseDragLeaveCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaiseDragLeaveCallback _raiseDragLeave = RaiseDragLeave;

  [MonoPInvokeCallback(typeof(RaiseDragLeaveCallback))]
  private static void RaiseDragLeave(IntPtr cPtr, IntPtr sender, IntPtr e) {
    if (!_DragLeave.ContainsKey(cPtr)) {
      throw new System.Exception("Delegate not found");
    }
    if (sender == System.IntPtr.Zero && e == System.IntPtr.Zero) {
      _DragLeave.Remove(cPtr);
      return;
    }
    DragLeaveHandler handler = _DragLeave[cPtr];
    if (handler != null) {
      handler(Noesis.Extend.Unbox(Noesis.Extend.GetProxy(sender, false)), new DragEventArgs(e, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, DragLeaveHandler> _DragLeave =
      new System.Collections.Generic.Dictionary<System.IntPtr, DragLeaveHandler>();


  public delegate void DragOverHandler(object sender, DragEventArgs e);
  public event DragOverHandler DragOver {
    add {
      if (!_DragOver.ContainsKey(swigCPtr.Handle)) {
        _DragOver.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_UIElement_DragOver(_raiseDragOver, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif
      }

      _DragOver[swigCPtr.Handle] += value;
    }
    remove {
      if (!_DragOver.ContainsKey(swigCPtr.Handle)) {
        throw new System.Exception("Delegate not found");
      }

      _DragOver[swigCPtr.Handle] -= value;

      if (_DragOver[swigCPtr.Handle] == null) {
        NoesisGUI_PINVOKE.UnbindEvent_UIElement_DragOver(_raiseDragOver, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif

        _DragOver.Remove(swigCPtr.Handle);
      }
    }
  }

  internal delegate void RaiseDragOverCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaiseDragOverCallback _raiseDragOver = RaiseDragOver;

  [MonoPInvokeCallback(typeof(RaiseDragOverCallback))]
  private static void RaiseDragOver(IntPtr cPtr, IntPtr sender, IntPtr e) {
    if (!_DragOver.ContainsKey(cPtr)) {
      throw new System.Exception("Delegate not found");
    }
    if (sender == System.IntPtr.Zero && e == System.IntPtr.Zero) {
      _DragOver.Remove(cPtr);
      return;
    }
    DragOverHandler handler = _DragOver[cPtr];
    if (handler != null) {
      handler(Noesis.Extend.Unbox(Noesis.Extend.GetProxy(sender, false)), new DragEventArgs(e, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, DragOverHandler> _DragOver =
      new System.Collections.Generic.Dictionary<System.IntPtr, DragOverHandler>();


  public delegate void DropHandler(object sender, DragEventArgs e);
  public event DropHandler Drop {
    add {
      if (!_Drop.ContainsKey(swigCPtr.Handle)) {
        _Drop.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_UIElement_Drop(_raiseDrop, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif
      }

      _Drop[swigCPtr.Handle] += value;
    }
    remove {
      if (!_Drop.ContainsKey(swigCPtr.Handle)) {
        throw new System.Exception("Delegate not found");
      }

      _Drop[swigCPtr.Handle] -= value;

      if (_Drop[swigCPtr.Handle] == null) {
        NoesisGUI_PINVOKE.UnbindEvent_UIElement_Drop(_raiseDrop, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif

        _Drop.Remove(swigCPtr.Handle);
      }
    }
  }

  internal delegate void RaiseDropCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaiseDropCallback _raiseDrop = RaiseDrop;

  [MonoPInvokeCallback(typeof(RaiseDropCallback))]
  private static void RaiseDrop(IntPtr cPtr, IntPtr sender, IntPtr e) {
    if (!_Drop.ContainsKey(cPtr)) {
      throw new System.Exception("Delegate not found");
    }
    if (sender == System.IntPtr.Zero && e == System.IntPtr.Zero) {
      _Drop.Remove(cPtr);
      return;
    }
    DropHandler handler = _Drop[cPtr];
    if (handler != null) {
      handler(Noesis.Extend.Unbox(Noesis.Extend.GetProxy(sender, false)), new DragEventArgs(e, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, DropHandler> _Drop =
      new System.Collections.Generic.Dictionary<System.IntPtr, DropHandler>();


  public delegate void GiveFeedbackHandler(object sender, GiveFeedbackEventArgs e);
  public event GiveFeedbackHandler GiveFeedback {
    add {
      if (!_GiveFeedback.ContainsKey(swigCPtr.Handle)) {
        _GiveFeedback.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_UIElement_GiveFeedback(_raiseGiveFeedback, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif
      }

      _GiveFeedback[swigCPtr.Handle] += value;
    }
    remove {
      if (!_GiveFeedback.ContainsKey(swigCPtr.Handle)) {
        throw new System.Exception("Delegate not found");
      }

      _GiveFeedback[swigCPtr.Handle] -= value;

      if (_GiveFeedback[swigCPtr.Handle] == null) {
        NoesisGUI_PINVOKE.UnbindEvent_UIElement_GiveFeedback(_raiseGiveFeedback, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif

        _GiveFeedback.Remove(swigCPtr.Handle);
      }
    }
  }

  internal delegate void RaiseGiveFeedbackCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaiseGiveFeedbackCallback _raiseGiveFeedback = RaiseGiveFeedback;

  [MonoPInvokeCallback(typeof(RaiseGiveFeedbackCallback))]
  private static void RaiseGiveFeedback(IntPtr cPtr, IntPtr sender, IntPtr e) {
    if (!_GiveFeedback.ContainsKey(cPtr)) {
      throw new System.Exception("Delegate not found");
    }
    if (sender == System.IntPtr.Zero && e == System.IntPtr.Zero) {
      _GiveFeedback.Remove(cPtr);
      return;
    }
    GiveFeedbackHandler handler = _GiveFeedback[cPtr];
    if (handler != null) {
      handler(Noesis.Extend.Unbox(Noesis.Extend.GetProxy(sender, false)), new GiveFeedbackEventArgs(e, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, GiveFeedbackHandler> _GiveFeedback =
      new System.Collections.Generic.Dictionary<System.IntPtr, GiveFeedbackHandler>();


  public delegate void GotFocusHandler(object sender, RoutedEventArgs e);
  public event GotFocusHandler GotFocus {
    add {
      if (!_GotFocus.ContainsKey(swigCPtr.Handle)) {
        _GotFocus.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_UIElement_GotFocus(_raiseGotFocus, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif
      }

      _GotFocus[swigCPtr.Handle] += value;
    }
    remove {
      if (!_GotFocus.ContainsKey(swigCPtr.Handle)) {
        throw new System.Exception("Delegate not found");
      }

      _GotFocus[swigCPtr.Handle] -= value;

      if (_GotFocus[swigCPtr.Handle] == null) {
        NoesisGUI_PINVOKE.UnbindEvent_UIElement_GotFocus(_raiseGotFocus, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif

        _GotFocus.Remove(swigCPtr.Handle);
      }
    }
  }

  internal delegate void RaiseGotFocusCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaiseGotFocusCallback _raiseGotFocus = RaiseGotFocus;

  [MonoPInvokeCallback(typeof(RaiseGotFocusCallback))]
  private static void RaiseGotFocus(IntPtr cPtr, IntPtr sender, IntPtr e) {
    if (!_GotFocus.ContainsKey(cPtr)) {
      throw new System.Exception("Delegate not found");
    }
    if (sender == System.IntPtr.Zero && e == System.IntPtr.Zero) {
      _GotFocus.Remove(cPtr);
      return;
    }
    GotFocusHandler handler = _GotFocus[cPtr];
    if (handler != null) {
      handler(Noesis.Extend.Unbox(Noesis.Extend.GetProxy(sender, false)), new RoutedEventArgs(e, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, GotFocusHandler> _GotFocus =
      new System.Collections.Generic.Dictionary<System.IntPtr, GotFocusHandler>();


  public delegate void GotKeyboardFocusHandler(object sender, KeyboardFocusChangedEventArgs e);
  public event GotKeyboardFocusHandler GotKeyboardFocus {
    add {
      if (!_GotKeyboardFocus.ContainsKey(swigCPtr.Handle)) {
        _GotKeyboardFocus.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_UIElement_GotKeyboardFocus(_raiseGotKeyboardFocus, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif
      }

      _GotKeyboardFocus[swigCPtr.Handle] += value;
    }
    remove {
      if (!_GotKeyboardFocus.ContainsKey(swigCPtr.Handle)) {
        throw new System.Exception("Delegate not found");
      }

      _GotKeyboardFocus[swigCPtr.Handle] -= value;

      if (_GotKeyboardFocus[swigCPtr.Handle] == null) {
        NoesisGUI_PINVOKE.UnbindEvent_UIElement_GotKeyboardFocus(_raiseGotKeyboardFocus, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif

        _GotKeyboardFocus.Remove(swigCPtr.Handle);
      }
    }
  }

  internal delegate void RaiseGotKeyboardFocusCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaiseGotKeyboardFocusCallback _raiseGotKeyboardFocus = RaiseGotKeyboardFocus;

  [MonoPInvokeCallback(typeof(RaiseGotKeyboardFocusCallback))]
  private static void RaiseGotKeyboardFocus(IntPtr cPtr, IntPtr sender, IntPtr e) {
    if (!_GotKeyboardFocus.ContainsKey(cPtr)) {
      throw new System.Exception("Delegate not found");
    }
    if (sender == System.IntPtr.Zero && e == System.IntPtr.Zero) {
      _GotKeyboardFocus.Remove(cPtr);
      return;
    }
    GotKeyboardFocusHandler handler = _GotKeyboardFocus[cPtr];
    if (handler != null) {
      handler(Noesis.Extend.Unbox(Noesis.Extend.GetProxy(sender, false)), new KeyboardFocusChangedEventArgs(e, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, GotKeyboardFocusHandler> _GotKeyboardFocus =
      new System.Collections.Generic.Dictionary<System.IntPtr, GotKeyboardFocusHandler>();


  public delegate void GotMouseCaptureHandler(object sender, MouseEventArgs e);
  public event GotMouseCaptureHandler GotMouseCapture {
    add {
      if (!_GotMouseCapture.ContainsKey(swigCPtr.Handle)) {
        _GotMouseCapture.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_UIElement_GotMouseCapture(_raiseGotMouseCapture, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif
      }

      _GotMouseCapture[swigCPtr.Handle] += value;
    }
    remove {
      if (!_GotMouseCapture.ContainsKey(swigCPtr.Handle)) {
        throw new System.Exception("Delegate not found");
      }

      _GotMouseCapture[swigCPtr.Handle] -= value;

      if (_GotMouseCapture[swigCPtr.Handle] == null) {
        NoesisGUI_PINVOKE.UnbindEvent_UIElement_GotMouseCapture(_raiseGotMouseCapture, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif

        _GotMouseCapture.Remove(swigCPtr.Handle);
      }
    }
  }

  internal delegate void RaiseGotMouseCaptureCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaiseGotMouseCaptureCallback _raiseGotMouseCapture = RaiseGotMouseCapture;

  [MonoPInvokeCallback(typeof(RaiseGotMouseCaptureCallback))]
  private static void RaiseGotMouseCapture(IntPtr cPtr, IntPtr sender, IntPtr e) {
    if (!_GotMouseCapture.ContainsKey(cPtr)) {
      throw new System.Exception("Delegate not found");
    }
    if (sender == System.IntPtr.Zero && e == System.IntPtr.Zero) {
      _GotMouseCapture.Remove(cPtr);
      return;
    }
    GotMouseCaptureHandler handler = _GotMouseCapture[cPtr];
    if (handler != null) {
      handler(Noesis.Extend.Unbox(Noesis.Extend.GetProxy(sender, false)), new MouseEventArgs(e, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, GotMouseCaptureHandler> _GotMouseCapture =
      new System.Collections.Generic.Dictionary<System.IntPtr, GotMouseCaptureHandler>();


  public delegate void KeyDownHandler(object sender, KeyEventArgs e);
  public event KeyDownHandler KeyDown {
    add {
      if (!_KeyDown.ContainsKey(swigCPtr.Handle)) {
        _KeyDown.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_UIElement_KeyDown(_raiseKeyDown, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif
      }

      _KeyDown[swigCPtr.Handle] += value;
    }
    remove {
      if (!_KeyDown.ContainsKey(swigCPtr.Handle)) {
        throw new System.Exception("Delegate not found");
      }

      _KeyDown[swigCPtr.Handle] -= value;

      if (_KeyDown[swigCPtr.Handle] == null) {
        NoesisGUI_PINVOKE.UnbindEvent_UIElement_KeyDown(_raiseKeyDown, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif

        _KeyDown.Remove(swigCPtr.Handle);
      }
    }
  }

  internal delegate void RaiseKeyDownCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaiseKeyDownCallback _raiseKeyDown = RaiseKeyDown;

  [MonoPInvokeCallback(typeof(RaiseKeyDownCallback))]
  private static void RaiseKeyDown(IntPtr cPtr, IntPtr sender, IntPtr e) {
    if (!_KeyDown.ContainsKey(cPtr)) {
      throw new System.Exception("Delegate not found");
    }
    if (sender == System.IntPtr.Zero && e == System.IntPtr.Zero) {
      _KeyDown.Remove(cPtr);
      return;
    }
    KeyDownHandler handler = _KeyDown[cPtr];
    if (handler != null) {
      handler(Noesis.Extend.Unbox(Noesis.Extend.GetProxy(sender, false)), new KeyEventArgs(e, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, KeyDownHandler> _KeyDown =
      new System.Collections.Generic.Dictionary<System.IntPtr, KeyDownHandler>();


  public delegate void KeyUpHandler(object sender, KeyEventArgs e);
  public event KeyUpHandler KeyUp {
    add {
      if (!_KeyUp.ContainsKey(swigCPtr.Handle)) {
        _KeyUp.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_UIElement_KeyUp(_raiseKeyUp, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif
      }

      _KeyUp[swigCPtr.Handle] += value;
    }
    remove {
      if (!_KeyUp.ContainsKey(swigCPtr.Handle)) {
        throw new System.Exception("Delegate not found");
      }

      _KeyUp[swigCPtr.Handle] -= value;

      if (_KeyUp[swigCPtr.Handle] == null) {
        NoesisGUI_PINVOKE.UnbindEvent_UIElement_KeyUp(_raiseKeyUp, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif

        _KeyUp.Remove(swigCPtr.Handle);
      }
    }
  }

  internal delegate void RaiseKeyUpCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaiseKeyUpCallback _raiseKeyUp = RaiseKeyUp;

  [MonoPInvokeCallback(typeof(RaiseKeyUpCallback))]
  private static void RaiseKeyUp(IntPtr cPtr, IntPtr sender, IntPtr e) {
    if (!_KeyUp.ContainsKey(cPtr)) {
      throw new System.Exception("Delegate not found");
    }
    if (sender == System.IntPtr.Zero && e == System.IntPtr.Zero) {
      _KeyUp.Remove(cPtr);
      return;
    }
    KeyUpHandler handler = _KeyUp[cPtr];
    if (handler != null) {
      handler(Noesis.Extend.Unbox(Noesis.Extend.GetProxy(sender, false)), new KeyEventArgs(e, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, KeyUpHandler> _KeyUp =
      new System.Collections.Generic.Dictionary<System.IntPtr, KeyUpHandler>();


  public delegate void LostFocusHandler(object sender, RoutedEventArgs e);
  public event LostFocusHandler LostFocus {
    add {
      if (!_LostFocus.ContainsKey(swigCPtr.Handle)) {
        _LostFocus.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_UIElement_LostFocus(_raiseLostFocus, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif
      }

      _LostFocus[swigCPtr.Handle] += value;
    }
    remove {
      if (!_LostFocus.ContainsKey(swigCPtr.Handle)) {
        throw new System.Exception("Delegate not found");
      }

      _LostFocus[swigCPtr.Handle] -= value;

      if (_LostFocus[swigCPtr.Handle] == null) {
        NoesisGUI_PINVOKE.UnbindEvent_UIElement_LostFocus(_raiseLostFocus, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif

        _LostFocus.Remove(swigCPtr.Handle);
      }
    }
  }

  internal delegate void RaiseLostFocusCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaiseLostFocusCallback _raiseLostFocus = RaiseLostFocus;

  [MonoPInvokeCallback(typeof(RaiseLostFocusCallback))]
  private static void RaiseLostFocus(IntPtr cPtr, IntPtr sender, IntPtr e) {
    if (!_LostFocus.ContainsKey(cPtr)) {
      throw new System.Exception("Delegate not found");
    }
    if (sender == System.IntPtr.Zero && e == System.IntPtr.Zero) {
      _LostFocus.Remove(cPtr);
      return;
    }
    LostFocusHandler handler = _LostFocus[cPtr];
    if (handler != null) {
      handler(Noesis.Extend.Unbox(Noesis.Extend.GetProxy(sender, false)), new RoutedEventArgs(e, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, LostFocusHandler> _LostFocus =
      new System.Collections.Generic.Dictionary<System.IntPtr, LostFocusHandler>();


  public delegate void LostKeyboardFocusHandler(object sender, KeyboardFocusChangedEventArgs e);
  public event LostKeyboardFocusHandler LostKeyboardFocus {
    add {
      if (!_LostKeyboardFocus.ContainsKey(swigCPtr.Handle)) {
        _LostKeyboardFocus.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_UIElement_LostKeyboardFocus(_raiseLostKeyboardFocus, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif
      }

      _LostKeyboardFocus[swigCPtr.Handle] += value;
    }
    remove {
      if (!_LostKeyboardFocus.ContainsKey(swigCPtr.Handle)) {
        throw new System.Exception("Delegate not found");
      }

      _LostKeyboardFocus[swigCPtr.Handle] -= value;

      if (_LostKeyboardFocus[swigCPtr.Handle] == null) {
        NoesisGUI_PINVOKE.UnbindEvent_UIElement_LostKeyboardFocus(_raiseLostKeyboardFocus, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif

        _LostKeyboardFocus.Remove(swigCPtr.Handle);
      }
    }
  }

  internal delegate void RaiseLostKeyboardFocusCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaiseLostKeyboardFocusCallback _raiseLostKeyboardFocus = RaiseLostKeyboardFocus;

  [MonoPInvokeCallback(typeof(RaiseLostKeyboardFocusCallback))]
  private static void RaiseLostKeyboardFocus(IntPtr cPtr, IntPtr sender, IntPtr e) {
    if (!_LostKeyboardFocus.ContainsKey(cPtr)) {
      throw new System.Exception("Delegate not found");
    }
    if (sender == System.IntPtr.Zero && e == System.IntPtr.Zero) {
      _LostKeyboardFocus.Remove(cPtr);
      return;
    }
    LostKeyboardFocusHandler handler = _LostKeyboardFocus[cPtr];
    if (handler != null) {
      handler(Noesis.Extend.Unbox(Noesis.Extend.GetProxy(sender, false)), new KeyboardFocusChangedEventArgs(e, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, LostKeyboardFocusHandler> _LostKeyboardFocus =
      new System.Collections.Generic.Dictionary<System.IntPtr, LostKeyboardFocusHandler>();


  public delegate void LostMouseCaptureHandler(object sender, MouseEventArgs e);
  public event LostMouseCaptureHandler LostMouseCapture {
    add {
      if (!_LostMouseCapture.ContainsKey(swigCPtr.Handle)) {
        _LostMouseCapture.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_UIElement_LostMouseCapture(_raiseLostMouseCapture, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif
      }

      _LostMouseCapture[swigCPtr.Handle] += value;
    }
    remove {
      if (!_LostMouseCapture.ContainsKey(swigCPtr.Handle)) {
        throw new System.Exception("Delegate not found");
      }

      _LostMouseCapture[swigCPtr.Handle] -= value;

      if (_LostMouseCapture[swigCPtr.Handle] == null) {
        NoesisGUI_PINVOKE.UnbindEvent_UIElement_LostMouseCapture(_raiseLostMouseCapture, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif

        _LostMouseCapture.Remove(swigCPtr.Handle);
      }
    }
  }

  internal delegate void RaiseLostMouseCaptureCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaiseLostMouseCaptureCallback _raiseLostMouseCapture = RaiseLostMouseCapture;

  [MonoPInvokeCallback(typeof(RaiseLostMouseCaptureCallback))]
  private static void RaiseLostMouseCapture(IntPtr cPtr, IntPtr sender, IntPtr e) {
    if (!_LostMouseCapture.ContainsKey(cPtr)) {
      throw new System.Exception("Delegate not found");
    }
    if (sender == System.IntPtr.Zero && e == System.IntPtr.Zero) {
      _LostMouseCapture.Remove(cPtr);
      return;
    }
    LostMouseCaptureHandler handler = _LostMouseCapture[cPtr];
    if (handler != null) {
      handler(Noesis.Extend.Unbox(Noesis.Extend.GetProxy(sender, false)), new MouseEventArgs(e, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, LostMouseCaptureHandler> _LostMouseCapture =
      new System.Collections.Generic.Dictionary<System.IntPtr, LostMouseCaptureHandler>();


  public delegate void MouseDownHandler(object sender, MouseButtonEventArgs e);
  public event MouseDownHandler MouseDown {
    add {
      if (!_MouseDown.ContainsKey(swigCPtr.Handle)) {
        _MouseDown.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_UIElement_MouseDown(_raiseMouseDown, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif
      }

      _MouseDown[swigCPtr.Handle] += value;
    }
    remove {
      if (!_MouseDown.ContainsKey(swigCPtr.Handle)) {
        throw new System.Exception("Delegate not found");
      }

      _MouseDown[swigCPtr.Handle] -= value;

      if (_MouseDown[swigCPtr.Handle] == null) {
        NoesisGUI_PINVOKE.UnbindEvent_UIElement_MouseDown(_raiseMouseDown, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif

        _MouseDown.Remove(swigCPtr.Handle);
      }
    }
  }

  internal delegate void RaiseMouseDownCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaiseMouseDownCallback _raiseMouseDown = RaiseMouseDown;

  [MonoPInvokeCallback(typeof(RaiseMouseDownCallback))]
  private static void RaiseMouseDown(IntPtr cPtr, IntPtr sender, IntPtr e) {
    if (!_MouseDown.ContainsKey(cPtr)) {
      throw new System.Exception("Delegate not found");
    }
    if (sender == System.IntPtr.Zero && e == System.IntPtr.Zero) {
      _MouseDown.Remove(cPtr);
      return;
    }
    MouseDownHandler handler = _MouseDown[cPtr];
    if (handler != null) {
      handler(Noesis.Extend.Unbox(Noesis.Extend.GetProxy(sender, false)), new MouseButtonEventArgs(e, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, MouseDownHandler> _MouseDown =
      new System.Collections.Generic.Dictionary<System.IntPtr, MouseDownHandler>();


  public delegate void MouseEnterHandler(object sender, MouseEventArgs e);
  public event MouseEnterHandler MouseEnter {
    add {
      if (!_MouseEnter.ContainsKey(swigCPtr.Handle)) {
        _MouseEnter.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_UIElement_MouseEnter(_raiseMouseEnter, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif
      }

      _MouseEnter[swigCPtr.Handle] += value;
    }
    remove {
      if (!_MouseEnter.ContainsKey(swigCPtr.Handle)) {
        throw new System.Exception("Delegate not found");
      }

      _MouseEnter[swigCPtr.Handle] -= value;

      if (_MouseEnter[swigCPtr.Handle] == null) {
        NoesisGUI_PINVOKE.UnbindEvent_UIElement_MouseEnter(_raiseMouseEnter, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif

        _MouseEnter.Remove(swigCPtr.Handle);
      }
    }
  }

  internal delegate void RaiseMouseEnterCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaiseMouseEnterCallback _raiseMouseEnter = RaiseMouseEnter;

  [MonoPInvokeCallback(typeof(RaiseMouseEnterCallback))]
  private static void RaiseMouseEnter(IntPtr cPtr, IntPtr sender, IntPtr e) {
    if (!_MouseEnter.ContainsKey(cPtr)) {
      throw new System.Exception("Delegate not found");
    }
    if (sender == System.IntPtr.Zero && e == System.IntPtr.Zero) {
      _MouseEnter.Remove(cPtr);
      return;
    }
    MouseEnterHandler handler = _MouseEnter[cPtr];
    if (handler != null) {
      handler(Noesis.Extend.Unbox(Noesis.Extend.GetProxy(sender, false)), new MouseEventArgs(e, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, MouseEnterHandler> _MouseEnter =
      new System.Collections.Generic.Dictionary<System.IntPtr, MouseEnterHandler>();


  public delegate void MouseLeaveHandler(object sender, MouseEventArgs e);
  public event MouseLeaveHandler MouseLeave {
    add {
      if (!_MouseLeave.ContainsKey(swigCPtr.Handle)) {
        _MouseLeave.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_UIElement_MouseLeave(_raiseMouseLeave, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif
      }

      _MouseLeave[swigCPtr.Handle] += value;
    }
    remove {
      if (!_MouseLeave.ContainsKey(swigCPtr.Handle)) {
        throw new System.Exception("Delegate not found");
      }

      _MouseLeave[swigCPtr.Handle] -= value;

      if (_MouseLeave[swigCPtr.Handle] == null) {
        NoesisGUI_PINVOKE.UnbindEvent_UIElement_MouseLeave(_raiseMouseLeave, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif

        _MouseLeave.Remove(swigCPtr.Handle);
      }
    }
  }

  internal delegate void RaiseMouseLeaveCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaiseMouseLeaveCallback _raiseMouseLeave = RaiseMouseLeave;

  [MonoPInvokeCallback(typeof(RaiseMouseLeaveCallback))]
  private static void RaiseMouseLeave(IntPtr cPtr, IntPtr sender, IntPtr e) {
    if (!_MouseLeave.ContainsKey(cPtr)) {
      throw new System.Exception("Delegate not found");
    }
    if (sender == System.IntPtr.Zero && e == System.IntPtr.Zero) {
      _MouseLeave.Remove(cPtr);
      return;
    }
    MouseLeaveHandler handler = _MouseLeave[cPtr];
    if (handler != null) {
      handler(Noesis.Extend.Unbox(Noesis.Extend.GetProxy(sender, false)), new MouseEventArgs(e, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, MouseLeaveHandler> _MouseLeave =
      new System.Collections.Generic.Dictionary<System.IntPtr, MouseLeaveHandler>();


  public delegate void MouseLeftButtonDownHandler(object sender, MouseButtonEventArgs e);
  public event MouseLeftButtonDownHandler MouseLeftButtonDown {
    add {
      if (!_MouseLeftButtonDown.ContainsKey(swigCPtr.Handle)) {
        _MouseLeftButtonDown.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_UIElement_MouseLeftButtonDown(_raiseMouseLeftButtonDown, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif
      }

      _MouseLeftButtonDown[swigCPtr.Handle] += value;
    }
    remove {
      if (!_MouseLeftButtonDown.ContainsKey(swigCPtr.Handle)) {
        throw new System.Exception("Delegate not found");
      }

      _MouseLeftButtonDown[swigCPtr.Handle] -= value;

      if (_MouseLeftButtonDown[swigCPtr.Handle] == null) {
        NoesisGUI_PINVOKE.UnbindEvent_UIElement_MouseLeftButtonDown(_raiseMouseLeftButtonDown, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif

        _MouseLeftButtonDown.Remove(swigCPtr.Handle);
      }
    }
  }

  internal delegate void RaiseMouseLeftButtonDownCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaiseMouseLeftButtonDownCallback _raiseMouseLeftButtonDown = RaiseMouseLeftButtonDown;

  [MonoPInvokeCallback(typeof(RaiseMouseLeftButtonDownCallback))]
  private static void RaiseMouseLeftButtonDown(IntPtr cPtr, IntPtr sender, IntPtr e) {
    if (!_MouseLeftButtonDown.ContainsKey(cPtr)) {
      throw new System.Exception("Delegate not found");
    }
    if (sender == System.IntPtr.Zero && e == System.IntPtr.Zero) {
      _MouseLeftButtonDown.Remove(cPtr);
      return;
    }
    MouseLeftButtonDownHandler handler = _MouseLeftButtonDown[cPtr];
    if (handler != null) {
      handler(Noesis.Extend.Unbox(Noesis.Extend.GetProxy(sender, false)), new MouseButtonEventArgs(e, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, MouseLeftButtonDownHandler> _MouseLeftButtonDown =
      new System.Collections.Generic.Dictionary<System.IntPtr, MouseLeftButtonDownHandler>();


  public delegate void MouseLeftButtonUpHandler(object sender, MouseButtonEventArgs e);
  public event MouseLeftButtonUpHandler MouseLeftButtonUp {
    add {
      if (!_MouseLeftButtonUp.ContainsKey(swigCPtr.Handle)) {
        _MouseLeftButtonUp.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_UIElement_MouseLeftButtonUp(_raiseMouseLeftButtonUp, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif
      }

      _MouseLeftButtonUp[swigCPtr.Handle] += value;
    }
    remove {
      if (!_MouseLeftButtonUp.ContainsKey(swigCPtr.Handle)) {
        throw new System.Exception("Delegate not found");
      }

      _MouseLeftButtonUp[swigCPtr.Handle] -= value;

      if (_MouseLeftButtonUp[swigCPtr.Handle] == null) {
        NoesisGUI_PINVOKE.UnbindEvent_UIElement_MouseLeftButtonUp(_raiseMouseLeftButtonUp, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif

        _MouseLeftButtonUp.Remove(swigCPtr.Handle);
      }
    }
  }

  internal delegate void RaiseMouseLeftButtonUpCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaiseMouseLeftButtonUpCallback _raiseMouseLeftButtonUp = RaiseMouseLeftButtonUp;

  [MonoPInvokeCallback(typeof(RaiseMouseLeftButtonUpCallback))]
  private static void RaiseMouseLeftButtonUp(IntPtr cPtr, IntPtr sender, IntPtr e) {
    if (!_MouseLeftButtonUp.ContainsKey(cPtr)) {
      throw new System.Exception("Delegate not found");
    }
    if (sender == System.IntPtr.Zero && e == System.IntPtr.Zero) {
      _MouseLeftButtonUp.Remove(cPtr);
      return;
    }
    MouseLeftButtonUpHandler handler = _MouseLeftButtonUp[cPtr];
    if (handler != null) {
      handler(Noesis.Extend.Unbox(Noesis.Extend.GetProxy(sender, false)), new MouseButtonEventArgs(e, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, MouseLeftButtonUpHandler> _MouseLeftButtonUp =
      new System.Collections.Generic.Dictionary<System.IntPtr, MouseLeftButtonUpHandler>();


  public delegate void MouseMoveHandler(object sender, MouseEventArgs e);
  public event MouseMoveHandler MouseMove {
    add {
      if (!_MouseMove.ContainsKey(swigCPtr.Handle)) {
        _MouseMove.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_UIElement_MouseMove(_raiseMouseMove, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif
      }

      _MouseMove[swigCPtr.Handle] += value;
    }
    remove {
      if (!_MouseMove.ContainsKey(swigCPtr.Handle)) {
        throw new System.Exception("Delegate not found");
      }

      _MouseMove[swigCPtr.Handle] -= value;

      if (_MouseMove[swigCPtr.Handle] == null) {
        NoesisGUI_PINVOKE.UnbindEvent_UIElement_MouseMove(_raiseMouseMove, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif

        _MouseMove.Remove(swigCPtr.Handle);
      }
    }
  }

  internal delegate void RaiseMouseMoveCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaiseMouseMoveCallback _raiseMouseMove = RaiseMouseMove;

  [MonoPInvokeCallback(typeof(RaiseMouseMoveCallback))]
  private static void RaiseMouseMove(IntPtr cPtr, IntPtr sender, IntPtr e) {
    if (!_MouseMove.ContainsKey(cPtr)) {
      throw new System.Exception("Delegate not found");
    }
    if (sender == System.IntPtr.Zero && e == System.IntPtr.Zero) {
      _MouseMove.Remove(cPtr);
      return;
    }
    MouseMoveHandler handler = _MouseMove[cPtr];
    if (handler != null) {
      handler(Noesis.Extend.Unbox(Noesis.Extend.GetProxy(sender, false)), new MouseEventArgs(e, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, MouseMoveHandler> _MouseMove =
      new System.Collections.Generic.Dictionary<System.IntPtr, MouseMoveHandler>();


  public delegate void MouseRightButtonDownHandler(object sender, MouseButtonEventArgs e);
  public event MouseRightButtonDownHandler MouseRightButtonDown {
    add {
      if (!_MouseRightButtonDown.ContainsKey(swigCPtr.Handle)) {
        _MouseRightButtonDown.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_UIElement_MouseRightButtonDown(_raiseMouseRightButtonDown, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif
      }

      _MouseRightButtonDown[swigCPtr.Handle] += value;
    }
    remove {
      if (!_MouseRightButtonDown.ContainsKey(swigCPtr.Handle)) {
        throw new System.Exception("Delegate not found");
      }

      _MouseRightButtonDown[swigCPtr.Handle] -= value;

      if (_MouseRightButtonDown[swigCPtr.Handle] == null) {
        NoesisGUI_PINVOKE.UnbindEvent_UIElement_MouseRightButtonDown(_raiseMouseRightButtonDown, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif

        _MouseRightButtonDown.Remove(swigCPtr.Handle);
      }
    }
  }

  internal delegate void RaiseMouseRightButtonDownCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaiseMouseRightButtonDownCallback _raiseMouseRightButtonDown = RaiseMouseRightButtonDown;

  [MonoPInvokeCallback(typeof(RaiseMouseRightButtonDownCallback))]
  private static void RaiseMouseRightButtonDown(IntPtr cPtr, IntPtr sender, IntPtr e) {
    if (!_MouseRightButtonDown.ContainsKey(cPtr)) {
      throw new System.Exception("Delegate not found");
    }
    if (sender == System.IntPtr.Zero && e == System.IntPtr.Zero) {
      _MouseRightButtonDown.Remove(cPtr);
      return;
    }
    MouseRightButtonDownHandler handler = _MouseRightButtonDown[cPtr];
    if (handler != null) {
      handler(Noesis.Extend.Unbox(Noesis.Extend.GetProxy(sender, false)), new MouseButtonEventArgs(e, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, MouseRightButtonDownHandler> _MouseRightButtonDown =
      new System.Collections.Generic.Dictionary<System.IntPtr, MouseRightButtonDownHandler>();


  public delegate void MouseRightButtonUpHandler(object sender, MouseButtonEventArgs e);
  public event MouseRightButtonUpHandler MouseRightButtonUp {
    add {
      if (!_MouseRightButtonUp.ContainsKey(swigCPtr.Handle)) {
        _MouseRightButtonUp.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_UIElement_MouseRightButtonUp(_raiseMouseRightButtonUp, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif
      }

      _MouseRightButtonUp[swigCPtr.Handle] += value;
    }
    remove {
      if (!_MouseRightButtonUp.ContainsKey(swigCPtr.Handle)) {
        throw new System.Exception("Delegate not found");
      }

      _MouseRightButtonUp[swigCPtr.Handle] -= value;

      if (_MouseRightButtonUp[swigCPtr.Handle] == null) {
        NoesisGUI_PINVOKE.UnbindEvent_UIElement_MouseRightButtonUp(_raiseMouseRightButtonUp, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif

        _MouseRightButtonUp.Remove(swigCPtr.Handle);
      }
    }
  }

  internal delegate void RaiseMouseRightButtonUpCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaiseMouseRightButtonUpCallback _raiseMouseRightButtonUp = RaiseMouseRightButtonUp;

  [MonoPInvokeCallback(typeof(RaiseMouseRightButtonUpCallback))]
  private static void RaiseMouseRightButtonUp(IntPtr cPtr, IntPtr sender, IntPtr e) {
    if (!_MouseRightButtonUp.ContainsKey(cPtr)) {
      throw new System.Exception("Delegate not found");
    }
    if (sender == System.IntPtr.Zero && e == System.IntPtr.Zero) {
      _MouseRightButtonUp.Remove(cPtr);
      return;
    }
    MouseRightButtonUpHandler handler = _MouseRightButtonUp[cPtr];
    if (handler != null) {
      handler(Noesis.Extend.Unbox(Noesis.Extend.GetProxy(sender, false)), new MouseButtonEventArgs(e, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, MouseRightButtonUpHandler> _MouseRightButtonUp =
      new System.Collections.Generic.Dictionary<System.IntPtr, MouseRightButtonUpHandler>();


  public delegate void MouseUpHandler(object sender, MouseButtonEventArgs e);
  public event MouseUpHandler MouseUp {
    add {
      if (!_MouseUp.ContainsKey(swigCPtr.Handle)) {
        _MouseUp.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_UIElement_MouseUp(_raiseMouseUp, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif
      }

      _MouseUp[swigCPtr.Handle] += value;
    }
    remove {
      if (!_MouseUp.ContainsKey(swigCPtr.Handle)) {
        throw new System.Exception("Delegate not found");
      }

      _MouseUp[swigCPtr.Handle] -= value;

      if (_MouseUp[swigCPtr.Handle] == null) {
        NoesisGUI_PINVOKE.UnbindEvent_UIElement_MouseUp(_raiseMouseUp, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif

        _MouseUp.Remove(swigCPtr.Handle);
      }
    }
  }

  internal delegate void RaiseMouseUpCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaiseMouseUpCallback _raiseMouseUp = RaiseMouseUp;

  [MonoPInvokeCallback(typeof(RaiseMouseUpCallback))]
  private static void RaiseMouseUp(IntPtr cPtr, IntPtr sender, IntPtr e) {
    if (!_MouseUp.ContainsKey(cPtr)) {
      throw new System.Exception("Delegate not found");
    }
    if (sender == System.IntPtr.Zero && e == System.IntPtr.Zero) {
      _MouseUp.Remove(cPtr);
      return;
    }
    MouseUpHandler handler = _MouseUp[cPtr];
    if (handler != null) {
      handler(Noesis.Extend.Unbox(Noesis.Extend.GetProxy(sender, false)), new MouseButtonEventArgs(e, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, MouseUpHandler> _MouseUp =
      new System.Collections.Generic.Dictionary<System.IntPtr, MouseUpHandler>();


  public delegate void MouseWheelHandler(object sender, MouseWheelEventArgs e);
  public event MouseWheelHandler MouseWheel {
    add {
      if (!_MouseWheel.ContainsKey(swigCPtr.Handle)) {
        _MouseWheel.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_UIElement_MouseWheel(_raiseMouseWheel, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif
      }

      _MouseWheel[swigCPtr.Handle] += value;
    }
    remove {
      if (!_MouseWheel.ContainsKey(swigCPtr.Handle)) {
        throw new System.Exception("Delegate not found");
      }

      _MouseWheel[swigCPtr.Handle] -= value;

      if (_MouseWheel[swigCPtr.Handle] == null) {
        NoesisGUI_PINVOKE.UnbindEvent_UIElement_MouseWheel(_raiseMouseWheel, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif

        _MouseWheel.Remove(swigCPtr.Handle);
      }
    }
  }

  internal delegate void RaiseMouseWheelCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaiseMouseWheelCallback _raiseMouseWheel = RaiseMouseWheel;

  [MonoPInvokeCallback(typeof(RaiseMouseWheelCallback))]
  private static void RaiseMouseWheel(IntPtr cPtr, IntPtr sender, IntPtr e) {
    if (!_MouseWheel.ContainsKey(cPtr)) {
      throw new System.Exception("Delegate not found");
    }
    if (sender == System.IntPtr.Zero && e == System.IntPtr.Zero) {
      _MouseWheel.Remove(cPtr);
      return;
    }
    MouseWheelHandler handler = _MouseWheel[cPtr];
    if (handler != null) {
      handler(Noesis.Extend.Unbox(Noesis.Extend.GetProxy(sender, false)), new MouseWheelEventArgs(e, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, MouseWheelHandler> _MouseWheel =
      new System.Collections.Generic.Dictionary<System.IntPtr, MouseWheelHandler>();


  public delegate void TouchDownHandler(object sender, TouchEventArgs e);
  public event TouchDownHandler TouchDown {
    add {
      if (!_TouchDown.ContainsKey(swigCPtr.Handle)) {
        _TouchDown.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_UIElement_TouchDown(_raiseTouchDown, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif
      }

      _TouchDown[swigCPtr.Handle] += value;
    }
    remove {
      if (!_TouchDown.ContainsKey(swigCPtr.Handle)) {
        throw new System.Exception("Delegate not found");
      }

      _TouchDown[swigCPtr.Handle] -= value;

      if (_TouchDown[swigCPtr.Handle] == null) {
        NoesisGUI_PINVOKE.UnbindEvent_UIElement_TouchDown(_raiseTouchDown, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif

        _TouchDown.Remove(swigCPtr.Handle);
      }
    }
  }

  internal delegate void RaiseTouchDownCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaiseTouchDownCallback _raiseTouchDown = RaiseTouchDown;

  [MonoPInvokeCallback(typeof(RaiseTouchDownCallback))]
  private static void RaiseTouchDown(IntPtr cPtr, IntPtr sender, IntPtr e) {
    if (!_TouchDown.ContainsKey(cPtr)) {
      throw new System.Exception("Delegate not found");
    }
    if (sender == System.IntPtr.Zero && e == System.IntPtr.Zero) {
      _TouchDown.Remove(cPtr);
      return;
    }
    TouchDownHandler handler = _TouchDown[cPtr];
    if (handler != null) {
      handler(Noesis.Extend.Unbox(Noesis.Extend.GetProxy(sender, false)), new TouchEventArgs(e, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, TouchDownHandler> _TouchDown =
      new System.Collections.Generic.Dictionary<System.IntPtr, TouchDownHandler>();


  public delegate void TouchMoveHandler(object sender, TouchEventArgs e);
  public event TouchMoveHandler TouchMove {
    add {
      if (!_TouchMove.ContainsKey(swigCPtr.Handle)) {
        _TouchMove.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_UIElement_TouchMove(_raiseTouchMove, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif
      }

      _TouchMove[swigCPtr.Handle] += value;
    }
    remove {
      if (!_TouchMove.ContainsKey(swigCPtr.Handle)) {
        throw new System.Exception("Delegate not found");
      }

      _TouchMove[swigCPtr.Handle] -= value;

      if (_TouchMove[swigCPtr.Handle] == null) {
        NoesisGUI_PINVOKE.UnbindEvent_UIElement_TouchMove(_raiseTouchMove, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif

        _TouchMove.Remove(swigCPtr.Handle);
      }
    }
  }

  internal delegate void RaiseTouchMoveCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaiseTouchMoveCallback _raiseTouchMove = RaiseTouchMove;

  [MonoPInvokeCallback(typeof(RaiseTouchMoveCallback))]
  private static void RaiseTouchMove(IntPtr cPtr, IntPtr sender, IntPtr e) {
    if (!_TouchMove.ContainsKey(cPtr)) {
      throw new System.Exception("Delegate not found");
    }
    if (sender == System.IntPtr.Zero && e == System.IntPtr.Zero) {
      _TouchMove.Remove(cPtr);
      return;
    }
    TouchMoveHandler handler = _TouchMove[cPtr];
    if (handler != null) {
      handler(Noesis.Extend.Unbox(Noesis.Extend.GetProxy(sender, false)), new TouchEventArgs(e, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, TouchMoveHandler> _TouchMove =
      new System.Collections.Generic.Dictionary<System.IntPtr, TouchMoveHandler>();


  public delegate void TouchUpHandler(object sender, TouchEventArgs e);
  public event TouchUpHandler TouchUp {
    add {
      if (!_TouchUp.ContainsKey(swigCPtr.Handle)) {
        _TouchUp.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_UIElement_TouchUp(_raiseTouchUp, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif
      }

      _TouchUp[swigCPtr.Handle] += value;
    }
    remove {
      if (!_TouchUp.ContainsKey(swigCPtr.Handle)) {
        throw new System.Exception("Delegate not found");
      }

      _TouchUp[swigCPtr.Handle] -= value;

      if (_TouchUp[swigCPtr.Handle] == null) {
        NoesisGUI_PINVOKE.UnbindEvent_UIElement_TouchUp(_raiseTouchUp, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif

        _TouchUp.Remove(swigCPtr.Handle);
      }
    }
  }

  internal delegate void RaiseTouchUpCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaiseTouchUpCallback _raiseTouchUp = RaiseTouchUp;

  [MonoPInvokeCallback(typeof(RaiseTouchUpCallback))]
  private static void RaiseTouchUp(IntPtr cPtr, IntPtr sender, IntPtr e) {
    if (!_TouchUp.ContainsKey(cPtr)) {
      throw new System.Exception("Delegate not found");
    }
    if (sender == System.IntPtr.Zero && e == System.IntPtr.Zero) {
      _TouchUp.Remove(cPtr);
      return;
    }
    TouchUpHandler handler = _TouchUp[cPtr];
    if (handler != null) {
      handler(Noesis.Extend.Unbox(Noesis.Extend.GetProxy(sender, false)), new TouchEventArgs(e, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, TouchUpHandler> _TouchUp =
      new System.Collections.Generic.Dictionary<System.IntPtr, TouchUpHandler>();


  public delegate void TouchEnterHandler(object sender, TouchEventArgs e);
  public event TouchEnterHandler TouchEnter {
    add {
      if (!_TouchEnter.ContainsKey(swigCPtr.Handle)) {
        _TouchEnter.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_UIElement_TouchEnter(_raiseTouchEnter, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif
      }

      _TouchEnter[swigCPtr.Handle] += value;
    }
    remove {
      if (!_TouchEnter.ContainsKey(swigCPtr.Handle)) {
        throw new System.Exception("Delegate not found");
      }

      _TouchEnter[swigCPtr.Handle] -= value;

      if (_TouchEnter[swigCPtr.Handle] == null) {
        NoesisGUI_PINVOKE.UnbindEvent_UIElement_TouchEnter(_raiseTouchEnter, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif

        _TouchEnter.Remove(swigCPtr.Handle);
      }
    }
  }

  internal delegate void RaiseTouchEnterCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaiseTouchEnterCallback _raiseTouchEnter = RaiseTouchEnter;

  [MonoPInvokeCallback(typeof(RaiseTouchEnterCallback))]
  private static void RaiseTouchEnter(IntPtr cPtr, IntPtr sender, IntPtr e) {
    if (!_TouchEnter.ContainsKey(cPtr)) {
      throw new System.Exception("Delegate not found");
    }
    if (sender == System.IntPtr.Zero && e == System.IntPtr.Zero) {
      _TouchEnter.Remove(cPtr);
      return;
    }
    TouchEnterHandler handler = _TouchEnter[cPtr];
    if (handler != null) {
      handler(Noesis.Extend.Unbox(Noesis.Extend.GetProxy(sender, false)), new TouchEventArgs(e, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, TouchEnterHandler> _TouchEnter =
      new System.Collections.Generic.Dictionary<System.IntPtr, TouchEnterHandler>();


  public delegate void TouchLeaveHandler(object sender, TouchEventArgs e);
  public event TouchLeaveHandler TouchLeave {
    add {
      if (!_TouchLeave.ContainsKey(swigCPtr.Handle)) {
        _TouchLeave.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_UIElement_TouchLeave(_raiseTouchLeave, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif
      }

      _TouchLeave[swigCPtr.Handle] += value;
    }
    remove {
      if (!_TouchLeave.ContainsKey(swigCPtr.Handle)) {
        throw new System.Exception("Delegate not found");
      }

      _TouchLeave[swigCPtr.Handle] -= value;

      if (_TouchLeave[swigCPtr.Handle] == null) {
        NoesisGUI_PINVOKE.UnbindEvent_UIElement_TouchLeave(_raiseTouchLeave, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif

        _TouchLeave.Remove(swigCPtr.Handle);
      }
    }
  }

  internal delegate void RaiseTouchLeaveCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaiseTouchLeaveCallback _raiseTouchLeave = RaiseTouchLeave;

  [MonoPInvokeCallback(typeof(RaiseTouchLeaveCallback))]
  private static void RaiseTouchLeave(IntPtr cPtr, IntPtr sender, IntPtr e) {
    if (!_TouchLeave.ContainsKey(cPtr)) {
      throw new System.Exception("Delegate not found");
    }
    if (sender == System.IntPtr.Zero && e == System.IntPtr.Zero) {
      _TouchLeave.Remove(cPtr);
      return;
    }
    TouchLeaveHandler handler = _TouchLeave[cPtr];
    if (handler != null) {
      handler(Noesis.Extend.Unbox(Noesis.Extend.GetProxy(sender, false)), new TouchEventArgs(e, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, TouchLeaveHandler> _TouchLeave =
      new System.Collections.Generic.Dictionary<System.IntPtr, TouchLeaveHandler>();


  public delegate void GotTouchCaptureHandler(object sender, TouchEventArgs e);
  public event GotTouchCaptureHandler GotTouchCapture {
    add {
      if (!_GotTouchCapture.ContainsKey(swigCPtr.Handle)) {
        _GotTouchCapture.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_UIElement_GotTouchCapture(_raiseGotTouchCapture, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif
      }

      _GotTouchCapture[swigCPtr.Handle] += value;
    }
    remove {
      if (!_GotTouchCapture.ContainsKey(swigCPtr.Handle)) {
        throw new System.Exception("Delegate not found");
      }

      _GotTouchCapture[swigCPtr.Handle] -= value;

      if (_GotTouchCapture[swigCPtr.Handle] == null) {
        NoesisGUI_PINVOKE.UnbindEvent_UIElement_GotTouchCapture(_raiseGotTouchCapture, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif

        _GotTouchCapture.Remove(swigCPtr.Handle);
      }
    }
  }

  internal delegate void RaiseGotTouchCaptureCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaiseGotTouchCaptureCallback _raiseGotTouchCapture = RaiseGotTouchCapture;

  [MonoPInvokeCallback(typeof(RaiseGotTouchCaptureCallback))]
  private static void RaiseGotTouchCapture(IntPtr cPtr, IntPtr sender, IntPtr e) {
    if (!_GotTouchCapture.ContainsKey(cPtr)) {
      throw new System.Exception("Delegate not found");
    }
    if (sender == System.IntPtr.Zero && e == System.IntPtr.Zero) {
      _GotTouchCapture.Remove(cPtr);
      return;
    }
    GotTouchCaptureHandler handler = _GotTouchCapture[cPtr];
    if (handler != null) {
      handler(Noesis.Extend.Unbox(Noesis.Extend.GetProxy(sender, false)), new TouchEventArgs(e, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, GotTouchCaptureHandler> _GotTouchCapture =
      new System.Collections.Generic.Dictionary<System.IntPtr, GotTouchCaptureHandler>();


  public delegate void LostTouchCaptureHandler(object sender, TouchEventArgs e);
  public event LostTouchCaptureHandler LostTouchCapture {
    add {
      if (!_LostTouchCapture.ContainsKey(swigCPtr.Handle)) {
        _LostTouchCapture.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_UIElement_LostTouchCapture(_raiseLostTouchCapture, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif
      }

      _LostTouchCapture[swigCPtr.Handle] += value;
    }
    remove {
      if (!_LostTouchCapture.ContainsKey(swigCPtr.Handle)) {
        throw new System.Exception("Delegate not found");
      }

      _LostTouchCapture[swigCPtr.Handle] -= value;

      if (_LostTouchCapture[swigCPtr.Handle] == null) {
        NoesisGUI_PINVOKE.UnbindEvent_UIElement_LostTouchCapture(_raiseLostTouchCapture, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif

        _LostTouchCapture.Remove(swigCPtr.Handle);
      }
    }
  }

  internal delegate void RaiseLostTouchCaptureCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaiseLostTouchCaptureCallback _raiseLostTouchCapture = RaiseLostTouchCapture;

  [MonoPInvokeCallback(typeof(RaiseLostTouchCaptureCallback))]
  private static void RaiseLostTouchCapture(IntPtr cPtr, IntPtr sender, IntPtr e) {
    if (!_LostTouchCapture.ContainsKey(cPtr)) {
      throw new System.Exception("Delegate not found");
    }
    if (sender == System.IntPtr.Zero && e == System.IntPtr.Zero) {
      _LostTouchCapture.Remove(cPtr);
      return;
    }
    LostTouchCaptureHandler handler = _LostTouchCapture[cPtr];
    if (handler != null) {
      handler(Noesis.Extend.Unbox(Noesis.Extend.GetProxy(sender, false)), new TouchEventArgs(e, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, LostTouchCaptureHandler> _LostTouchCapture =
      new System.Collections.Generic.Dictionary<System.IntPtr, LostTouchCaptureHandler>();


  public delegate void PreviewTouchDownHandler(object sender, TouchEventArgs e);
  public event PreviewTouchDownHandler PreviewTouchDown {
    add {
      if (!_PreviewTouchDown.ContainsKey(swigCPtr.Handle)) {
        _PreviewTouchDown.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_UIElement_PreviewTouchDown(_raisePreviewTouchDown, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif
      }

      _PreviewTouchDown[swigCPtr.Handle] += value;
    }
    remove {
      if (!_PreviewTouchDown.ContainsKey(swigCPtr.Handle)) {
        throw new System.Exception("Delegate not found");
      }

      _PreviewTouchDown[swigCPtr.Handle] -= value;

      if (_PreviewTouchDown[swigCPtr.Handle] == null) {
        NoesisGUI_PINVOKE.UnbindEvent_UIElement_PreviewTouchDown(_raisePreviewTouchDown, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif

        _PreviewTouchDown.Remove(swigCPtr.Handle);
      }
    }
  }

  internal delegate void RaisePreviewTouchDownCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaisePreviewTouchDownCallback _raisePreviewTouchDown = RaisePreviewTouchDown;

  [MonoPInvokeCallback(typeof(RaisePreviewTouchDownCallback))]
  private static void RaisePreviewTouchDown(IntPtr cPtr, IntPtr sender, IntPtr e) {
    if (!_PreviewTouchDown.ContainsKey(cPtr)) {
      throw new System.Exception("Delegate not found");
    }
    if (sender == System.IntPtr.Zero && e == System.IntPtr.Zero) {
      _PreviewTouchDown.Remove(cPtr);
      return;
    }
    PreviewTouchDownHandler handler = _PreviewTouchDown[cPtr];
    if (handler != null) {
      handler(Noesis.Extend.Unbox(Noesis.Extend.GetProxy(sender, false)), new TouchEventArgs(e, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, PreviewTouchDownHandler> _PreviewTouchDown =
      new System.Collections.Generic.Dictionary<System.IntPtr, PreviewTouchDownHandler>();


  public delegate void PreviewTouchMoveHandler(object sender, TouchEventArgs e);
  public event PreviewTouchMoveHandler PreviewTouchMove {
    add {
      if (!_PreviewTouchMove.ContainsKey(swigCPtr.Handle)) {
        _PreviewTouchMove.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_UIElement_PreviewTouchMove(_raisePreviewTouchMove, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif
      }

      _PreviewTouchMove[swigCPtr.Handle] += value;
    }
    remove {
      if (!_PreviewTouchMove.ContainsKey(swigCPtr.Handle)) {
        throw new System.Exception("Delegate not found");
      }

      _PreviewTouchMove[swigCPtr.Handle] -= value;

      if (_PreviewTouchMove[swigCPtr.Handle] == null) {
        NoesisGUI_PINVOKE.UnbindEvent_UIElement_PreviewTouchMove(_raisePreviewTouchMove, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif

        _PreviewTouchMove.Remove(swigCPtr.Handle);
      }
    }
  }

  internal delegate void RaisePreviewTouchMoveCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaisePreviewTouchMoveCallback _raisePreviewTouchMove = RaisePreviewTouchMove;

  [MonoPInvokeCallback(typeof(RaisePreviewTouchMoveCallback))]
  private static void RaisePreviewTouchMove(IntPtr cPtr, IntPtr sender, IntPtr e) {
    if (!_PreviewTouchMove.ContainsKey(cPtr)) {
      throw new System.Exception("Delegate not found");
    }
    if (sender == System.IntPtr.Zero && e == System.IntPtr.Zero) {
      _PreviewTouchMove.Remove(cPtr);
      return;
    }
    PreviewTouchMoveHandler handler = _PreviewTouchMove[cPtr];
    if (handler != null) {
      handler(Noesis.Extend.Unbox(Noesis.Extend.GetProxy(sender, false)), new TouchEventArgs(e, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, PreviewTouchMoveHandler> _PreviewTouchMove =
      new System.Collections.Generic.Dictionary<System.IntPtr, PreviewTouchMoveHandler>();


  public delegate void PreviewTouchUpHandler(object sender, TouchEventArgs e);
  public event PreviewTouchUpHandler PreviewTouchUp {
    add {
      if (!_PreviewTouchUp.ContainsKey(swigCPtr.Handle)) {
        _PreviewTouchUp.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_UIElement_PreviewTouchUp(_raisePreviewTouchUp, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif
      }

      _PreviewTouchUp[swigCPtr.Handle] += value;
    }
    remove {
      if (!_PreviewTouchUp.ContainsKey(swigCPtr.Handle)) {
        throw new System.Exception("Delegate not found");
      }

      _PreviewTouchUp[swigCPtr.Handle] -= value;

      if (_PreviewTouchUp[swigCPtr.Handle] == null) {
        NoesisGUI_PINVOKE.UnbindEvent_UIElement_PreviewTouchUp(_raisePreviewTouchUp, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif

        _PreviewTouchUp.Remove(swigCPtr.Handle);
      }
    }
  }

  internal delegate void RaisePreviewTouchUpCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaisePreviewTouchUpCallback _raisePreviewTouchUp = RaisePreviewTouchUp;

  [MonoPInvokeCallback(typeof(RaisePreviewTouchUpCallback))]
  private static void RaisePreviewTouchUp(IntPtr cPtr, IntPtr sender, IntPtr e) {
    if (!_PreviewTouchUp.ContainsKey(cPtr)) {
      throw new System.Exception("Delegate not found");
    }
    if (sender == System.IntPtr.Zero && e == System.IntPtr.Zero) {
      _PreviewTouchUp.Remove(cPtr);
      return;
    }
    PreviewTouchUpHandler handler = _PreviewTouchUp[cPtr];
    if (handler != null) {
      handler(Noesis.Extend.Unbox(Noesis.Extend.GetProxy(sender, false)), new TouchEventArgs(e, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, PreviewTouchUpHandler> _PreviewTouchUp =
      new System.Collections.Generic.Dictionary<System.IntPtr, PreviewTouchUpHandler>();


  public delegate void ManipulationStartingHandler(object sender, ManipulationStartingEventArgs e);
  public event ManipulationStartingHandler ManipulationStarting {
    add {
      if (!_ManipulationStarting.ContainsKey(swigCPtr.Handle)) {
        _ManipulationStarting.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_UIElement_ManipulationStarting(_raiseManipulationStarting, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif
      }

      _ManipulationStarting[swigCPtr.Handle] += value;
    }
    remove {
      if (!_ManipulationStarting.ContainsKey(swigCPtr.Handle)) {
        throw new System.Exception("Delegate not found");
      }

      _ManipulationStarting[swigCPtr.Handle] -= value;

      if (_ManipulationStarting[swigCPtr.Handle] == null) {
        NoesisGUI_PINVOKE.UnbindEvent_UIElement_ManipulationStarting(_raiseManipulationStarting, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif

        _ManipulationStarting.Remove(swigCPtr.Handle);
      }
    }
  }

  internal delegate void RaiseManipulationStartingCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaiseManipulationStartingCallback _raiseManipulationStarting = RaiseManipulationStarting;

  [MonoPInvokeCallback(typeof(RaiseManipulationStartingCallback))]
  private static void RaiseManipulationStarting(IntPtr cPtr, IntPtr sender, IntPtr e) {
    if (!_ManipulationStarting.ContainsKey(cPtr)) {
      throw new System.Exception("Delegate not found");
    }
    if (sender == System.IntPtr.Zero && e == System.IntPtr.Zero) {
      _ManipulationStarting.Remove(cPtr);
      return;
    }
    ManipulationStartingHandler handler = _ManipulationStarting[cPtr];
    if (handler != null) {
      handler(Noesis.Extend.Unbox(Noesis.Extend.GetProxy(sender, false)), new ManipulationStartingEventArgs(e, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, ManipulationStartingHandler> _ManipulationStarting =
      new System.Collections.Generic.Dictionary<System.IntPtr, ManipulationStartingHandler>();


  public delegate void ManipulationStartedHandler(object sender, ManipulationStartedEventArgs e);
  public event ManipulationStartedHandler ManipulationStarted {
    add {
      if (!_ManipulationStarted.ContainsKey(swigCPtr.Handle)) {
        _ManipulationStarted.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_UIElement_ManipulationStarted(_raiseManipulationStarted, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif
      }

      _ManipulationStarted[swigCPtr.Handle] += value;
    }
    remove {
      if (!_ManipulationStarted.ContainsKey(swigCPtr.Handle)) {
        throw new System.Exception("Delegate not found");
      }

      _ManipulationStarted[swigCPtr.Handle] -= value;

      if (_ManipulationStarted[swigCPtr.Handle] == null) {
        NoesisGUI_PINVOKE.UnbindEvent_UIElement_ManipulationStarted(_raiseManipulationStarted, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif

        _ManipulationStarted.Remove(swigCPtr.Handle);
      }
    }
  }

  internal delegate void RaiseManipulationStartedCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaiseManipulationStartedCallback _raiseManipulationStarted = RaiseManipulationStarted;

  [MonoPInvokeCallback(typeof(RaiseManipulationStartedCallback))]
  private static void RaiseManipulationStarted(IntPtr cPtr, IntPtr sender, IntPtr e) {
    if (!_ManipulationStarted.ContainsKey(cPtr)) {
      throw new System.Exception("Delegate not found");
    }
    if (sender == System.IntPtr.Zero && e == System.IntPtr.Zero) {
      _ManipulationStarted.Remove(cPtr);
      return;
    }
    ManipulationStartedHandler handler = _ManipulationStarted[cPtr];
    if (handler != null) {
      handler(Noesis.Extend.Unbox(Noesis.Extend.GetProxy(sender, false)), new ManipulationStartedEventArgs(e, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, ManipulationStartedHandler> _ManipulationStarted =
      new System.Collections.Generic.Dictionary<System.IntPtr, ManipulationStartedHandler>();


  public delegate void ManipulationDeltaHandler(object sender, ManipulationDeltaEventArgs e);
  public event ManipulationDeltaHandler ManipulationDelta {
    add {
      if (!_ManipulationDelta.ContainsKey(swigCPtr.Handle)) {
        _ManipulationDelta.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_UIElement_ManipulationDelta(_raiseManipulationDelta, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif
      }

      _ManipulationDelta[swigCPtr.Handle] += value;
    }
    remove {
      if (!_ManipulationDelta.ContainsKey(swigCPtr.Handle)) {
        throw new System.Exception("Delegate not found");
      }

      _ManipulationDelta[swigCPtr.Handle] -= value;

      if (_ManipulationDelta[swigCPtr.Handle] == null) {
        NoesisGUI_PINVOKE.UnbindEvent_UIElement_ManipulationDelta(_raiseManipulationDelta, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif

        _ManipulationDelta.Remove(swigCPtr.Handle);
      }
    }
  }

  internal delegate void RaiseManipulationDeltaCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaiseManipulationDeltaCallback _raiseManipulationDelta = RaiseManipulationDelta;

  [MonoPInvokeCallback(typeof(RaiseManipulationDeltaCallback))]
  private static void RaiseManipulationDelta(IntPtr cPtr, IntPtr sender, IntPtr e) {
    if (!_ManipulationDelta.ContainsKey(cPtr)) {
      throw new System.Exception("Delegate not found");
    }
    if (sender == System.IntPtr.Zero && e == System.IntPtr.Zero) {
      _ManipulationDelta.Remove(cPtr);
      return;
    }
    ManipulationDeltaHandler handler = _ManipulationDelta[cPtr];
    if (handler != null) {
      handler(Noesis.Extend.Unbox(Noesis.Extend.GetProxy(sender, false)), new ManipulationDeltaEventArgs(e, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, ManipulationDeltaHandler> _ManipulationDelta =
      new System.Collections.Generic.Dictionary<System.IntPtr, ManipulationDeltaHandler>();


  public delegate void ManipulationInertiaStartingHandler(object sender, ManipulationInertiaStartingEventArgs e);
  public event ManipulationInertiaStartingHandler ManipulationInertiaStarting {
    add {
      if (!_ManipulationInertiaStarting.ContainsKey(swigCPtr.Handle)) {
        _ManipulationInertiaStarting.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_UIElement_ManipulationInertiaStarting(_raiseManipulationInertiaStarting, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif
      }

      _ManipulationInertiaStarting[swigCPtr.Handle] += value;
    }
    remove {
      if (!_ManipulationInertiaStarting.ContainsKey(swigCPtr.Handle)) {
        throw new System.Exception("Delegate not found");
      }

      _ManipulationInertiaStarting[swigCPtr.Handle] -= value;

      if (_ManipulationInertiaStarting[swigCPtr.Handle] == null) {
        NoesisGUI_PINVOKE.UnbindEvent_UIElement_ManipulationInertiaStarting(_raiseManipulationInertiaStarting, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif

        _ManipulationInertiaStarting.Remove(swigCPtr.Handle);
      }
    }
  }

  internal delegate void RaiseManipulationInertiaStartingCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaiseManipulationInertiaStartingCallback _raiseManipulationInertiaStarting = RaiseManipulationInertiaStarting;

  [MonoPInvokeCallback(typeof(RaiseManipulationInertiaStartingCallback))]
  private static void RaiseManipulationInertiaStarting(IntPtr cPtr, IntPtr sender, IntPtr e) {
    if (!_ManipulationInertiaStarting.ContainsKey(cPtr)) {
      throw new System.Exception("Delegate not found");
    }
    if (sender == System.IntPtr.Zero && e == System.IntPtr.Zero) {
      _ManipulationInertiaStarting.Remove(cPtr);
      return;
    }
    ManipulationInertiaStartingHandler handler = _ManipulationInertiaStarting[cPtr];
    if (handler != null) {
      handler(Noesis.Extend.Unbox(Noesis.Extend.GetProxy(sender, false)), new ManipulationInertiaStartingEventArgs(e, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, ManipulationInertiaStartingHandler> _ManipulationInertiaStarting =
      new System.Collections.Generic.Dictionary<System.IntPtr, ManipulationInertiaStartingHandler>();


  public delegate void ManipulationCompletedHandler(object sender, ManipulationCompletedEventArgs e);
  public event ManipulationCompletedHandler ManipulationCompleted {
    add {
      if (!_ManipulationCompleted.ContainsKey(swigCPtr.Handle)) {
        _ManipulationCompleted.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_UIElement_ManipulationCompleted(_raiseManipulationCompleted, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif
      }

      _ManipulationCompleted[swigCPtr.Handle] += value;
    }
    remove {
      if (!_ManipulationCompleted.ContainsKey(swigCPtr.Handle)) {
        throw new System.Exception("Delegate not found");
      }

      _ManipulationCompleted[swigCPtr.Handle] -= value;

      if (_ManipulationCompleted[swigCPtr.Handle] == null) {
        NoesisGUI_PINVOKE.UnbindEvent_UIElement_ManipulationCompleted(_raiseManipulationCompleted, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif

        _ManipulationCompleted.Remove(swigCPtr.Handle);
      }
    }
  }

  internal delegate void RaiseManipulationCompletedCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaiseManipulationCompletedCallback _raiseManipulationCompleted = RaiseManipulationCompleted;

  [MonoPInvokeCallback(typeof(RaiseManipulationCompletedCallback))]
  private static void RaiseManipulationCompleted(IntPtr cPtr, IntPtr sender, IntPtr e) {
    if (!_ManipulationCompleted.ContainsKey(cPtr)) {
      throw new System.Exception("Delegate not found");
    }
    if (sender == System.IntPtr.Zero && e == System.IntPtr.Zero) {
      _ManipulationCompleted.Remove(cPtr);
      return;
    }
    ManipulationCompletedHandler handler = _ManipulationCompleted[cPtr];
    if (handler != null) {
      handler(Noesis.Extend.Unbox(Noesis.Extend.GetProxy(sender, false)), new ManipulationCompletedEventArgs(e, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, ManipulationCompletedHandler> _ManipulationCompleted =
      new System.Collections.Generic.Dictionary<System.IntPtr, ManipulationCompletedHandler>();


  public delegate void PreviewDragEnterHandler(object sender, DragEventArgs e);
  public event PreviewDragEnterHandler PreviewDragEnter {
    add {
      if (!_PreviewDragEnter.ContainsKey(swigCPtr.Handle)) {
        _PreviewDragEnter.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_UIElement_PreviewDragEnter(_raisePreviewDragEnter, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif
      }

      _PreviewDragEnter[swigCPtr.Handle] += value;
    }
    remove {
      if (!_PreviewDragEnter.ContainsKey(swigCPtr.Handle)) {
        throw new System.Exception("Delegate not found");
      }

      _PreviewDragEnter[swigCPtr.Handle] -= value;

      if (_PreviewDragEnter[swigCPtr.Handle] == null) {
        NoesisGUI_PINVOKE.UnbindEvent_UIElement_PreviewDragEnter(_raisePreviewDragEnter, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif

        _PreviewDragEnter.Remove(swigCPtr.Handle);
      }
    }
  }

  internal delegate void RaisePreviewDragEnterCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaisePreviewDragEnterCallback _raisePreviewDragEnter = RaisePreviewDragEnter;

  [MonoPInvokeCallback(typeof(RaisePreviewDragEnterCallback))]
  private static void RaisePreviewDragEnter(IntPtr cPtr, IntPtr sender, IntPtr e) {
    if (!_PreviewDragEnter.ContainsKey(cPtr)) {
      throw new System.Exception("Delegate not found");
    }
    if (sender == System.IntPtr.Zero && e == System.IntPtr.Zero) {
      _PreviewDragEnter.Remove(cPtr);
      return;
    }
    PreviewDragEnterHandler handler = _PreviewDragEnter[cPtr];
    if (handler != null) {
      handler(Noesis.Extend.Unbox(Noesis.Extend.GetProxy(sender, false)), new DragEventArgs(e, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, PreviewDragEnterHandler> _PreviewDragEnter =
      new System.Collections.Generic.Dictionary<System.IntPtr, PreviewDragEnterHandler>();


  public delegate void PreviewDragLeaveHandler(object sender, DragEventArgs e);
  public event PreviewDragLeaveHandler PreviewDragLeave {
    add {
      if (!_PreviewDragLeave.ContainsKey(swigCPtr.Handle)) {
        _PreviewDragLeave.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_UIElement_PreviewDragLeave(_raisePreviewDragLeave, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif
      }

      _PreviewDragLeave[swigCPtr.Handle] += value;
    }
    remove {
      if (!_PreviewDragLeave.ContainsKey(swigCPtr.Handle)) {
        throw new System.Exception("Delegate not found");
      }

      _PreviewDragLeave[swigCPtr.Handle] -= value;

      if (_PreviewDragLeave[swigCPtr.Handle] == null) {
        NoesisGUI_PINVOKE.UnbindEvent_UIElement_PreviewDragLeave(_raisePreviewDragLeave, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif

        _PreviewDragLeave.Remove(swigCPtr.Handle);
      }
    }
  }

  internal delegate void RaisePreviewDragLeaveCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaisePreviewDragLeaveCallback _raisePreviewDragLeave = RaisePreviewDragLeave;

  [MonoPInvokeCallback(typeof(RaisePreviewDragLeaveCallback))]
  private static void RaisePreviewDragLeave(IntPtr cPtr, IntPtr sender, IntPtr e) {
    if (!_PreviewDragLeave.ContainsKey(cPtr)) {
      throw new System.Exception("Delegate not found");
    }
    if (sender == System.IntPtr.Zero && e == System.IntPtr.Zero) {
      _PreviewDragLeave.Remove(cPtr);
      return;
    }
    PreviewDragLeaveHandler handler = _PreviewDragLeave[cPtr];
    if (handler != null) {
      handler(Noesis.Extend.Unbox(Noesis.Extend.GetProxy(sender, false)), new DragEventArgs(e, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, PreviewDragLeaveHandler> _PreviewDragLeave =
      new System.Collections.Generic.Dictionary<System.IntPtr, PreviewDragLeaveHandler>();


  public delegate void PreviewDragOverHandler(object sender, DragEventArgs e);
  public event PreviewDragOverHandler PreviewDragOver {
    add {
      if (!_PreviewDragOver.ContainsKey(swigCPtr.Handle)) {
        _PreviewDragOver.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_UIElement_PreviewDragOver(_raisePreviewDragOver, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif
      }

      _PreviewDragOver[swigCPtr.Handle] += value;
    }
    remove {
      if (!_PreviewDragOver.ContainsKey(swigCPtr.Handle)) {
        throw new System.Exception("Delegate not found");
      }

      _PreviewDragOver[swigCPtr.Handle] -= value;

      if (_PreviewDragOver[swigCPtr.Handle] == null) {
        NoesisGUI_PINVOKE.UnbindEvent_UIElement_PreviewDragOver(_raisePreviewDragOver, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif

        _PreviewDragOver.Remove(swigCPtr.Handle);
      }
    }
  }

  internal delegate void RaisePreviewDragOverCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaisePreviewDragOverCallback _raisePreviewDragOver = RaisePreviewDragOver;

  [MonoPInvokeCallback(typeof(RaisePreviewDragOverCallback))]
  private static void RaisePreviewDragOver(IntPtr cPtr, IntPtr sender, IntPtr e) {
    if (!_PreviewDragOver.ContainsKey(cPtr)) {
      throw new System.Exception("Delegate not found");
    }
    if (sender == System.IntPtr.Zero && e == System.IntPtr.Zero) {
      _PreviewDragOver.Remove(cPtr);
      return;
    }
    PreviewDragOverHandler handler = _PreviewDragOver[cPtr];
    if (handler != null) {
      handler(Noesis.Extend.Unbox(Noesis.Extend.GetProxy(sender, false)), new DragEventArgs(e, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, PreviewDragOverHandler> _PreviewDragOver =
      new System.Collections.Generic.Dictionary<System.IntPtr, PreviewDragOverHandler>();


  public delegate void PreviewDropHandler(object sender, DragEventArgs e);
  public event PreviewDropHandler PreviewDrop {
    add {
      if (!_PreviewDrop.ContainsKey(swigCPtr.Handle)) {
        _PreviewDrop.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_UIElement_PreviewDrop(_raisePreviewDrop, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif
      }

      _PreviewDrop[swigCPtr.Handle] += value;
    }
    remove {
      if (!_PreviewDrop.ContainsKey(swigCPtr.Handle)) {
        throw new System.Exception("Delegate not found");
      }

      _PreviewDrop[swigCPtr.Handle] -= value;

      if (_PreviewDrop[swigCPtr.Handle] == null) {
        NoesisGUI_PINVOKE.UnbindEvent_UIElement_PreviewDrop(_raisePreviewDrop, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif

        _PreviewDrop.Remove(swigCPtr.Handle);
      }
    }
  }

  internal delegate void RaisePreviewDropCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaisePreviewDropCallback _raisePreviewDrop = RaisePreviewDrop;

  [MonoPInvokeCallback(typeof(RaisePreviewDropCallback))]
  private static void RaisePreviewDrop(IntPtr cPtr, IntPtr sender, IntPtr e) {
    if (!_PreviewDrop.ContainsKey(cPtr)) {
      throw new System.Exception("Delegate not found");
    }
    if (sender == System.IntPtr.Zero && e == System.IntPtr.Zero) {
      _PreviewDrop.Remove(cPtr);
      return;
    }
    PreviewDropHandler handler = _PreviewDrop[cPtr];
    if (handler != null) {
      handler(Noesis.Extend.Unbox(Noesis.Extend.GetProxy(sender, false)), new DragEventArgs(e, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, PreviewDropHandler> _PreviewDrop =
      new System.Collections.Generic.Dictionary<System.IntPtr, PreviewDropHandler>();


  public delegate void PreviewGiveFeedbackHandler(object sender, GiveFeedbackEventArgs e);
  public event PreviewGiveFeedbackHandler PreviewGiveFeedback {
    add {
      if (!_PreviewGiveFeedback.ContainsKey(swigCPtr.Handle)) {
        _PreviewGiveFeedback.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_UIElement_PreviewGiveFeedback(_raisePreviewGiveFeedback, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif
      }

      _PreviewGiveFeedback[swigCPtr.Handle] += value;
    }
    remove {
      if (!_PreviewGiveFeedback.ContainsKey(swigCPtr.Handle)) {
        throw new System.Exception("Delegate not found");
      }

      _PreviewGiveFeedback[swigCPtr.Handle] -= value;

      if (_PreviewGiveFeedback[swigCPtr.Handle] == null) {
        NoesisGUI_PINVOKE.UnbindEvent_UIElement_PreviewGiveFeedback(_raisePreviewGiveFeedback, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif

        _PreviewGiveFeedback.Remove(swigCPtr.Handle);
      }
    }
  }

  internal delegate void RaisePreviewGiveFeedbackCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaisePreviewGiveFeedbackCallback _raisePreviewGiveFeedback = RaisePreviewGiveFeedback;

  [MonoPInvokeCallback(typeof(RaisePreviewGiveFeedbackCallback))]
  private static void RaisePreviewGiveFeedback(IntPtr cPtr, IntPtr sender, IntPtr e) {
    if (!_PreviewGiveFeedback.ContainsKey(cPtr)) {
      throw new System.Exception("Delegate not found");
    }
    if (sender == System.IntPtr.Zero && e == System.IntPtr.Zero) {
      _PreviewGiveFeedback.Remove(cPtr);
      return;
    }
    PreviewGiveFeedbackHandler handler = _PreviewGiveFeedback[cPtr];
    if (handler != null) {
      handler(Noesis.Extend.Unbox(Noesis.Extend.GetProxy(sender, false)), new GiveFeedbackEventArgs(e, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, PreviewGiveFeedbackHandler> _PreviewGiveFeedback =
      new System.Collections.Generic.Dictionary<System.IntPtr, PreviewGiveFeedbackHandler>();


  public delegate void PreviewGotKeyboardFocusHandler(object sender, KeyboardFocusChangedEventArgs e);
  public event PreviewGotKeyboardFocusHandler PreviewGotKeyboardFocus {
    add {
      if (!_PreviewGotKeyboardFocus.ContainsKey(swigCPtr.Handle)) {
        _PreviewGotKeyboardFocus.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_UIElement_PreviewGotKeyboardFocus(_raisePreviewGotKeyboardFocus, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif
      }

      _PreviewGotKeyboardFocus[swigCPtr.Handle] += value;
    }
    remove {
      if (!_PreviewGotKeyboardFocus.ContainsKey(swigCPtr.Handle)) {
        throw new System.Exception("Delegate not found");
      }

      _PreviewGotKeyboardFocus[swigCPtr.Handle] -= value;

      if (_PreviewGotKeyboardFocus[swigCPtr.Handle] == null) {
        NoesisGUI_PINVOKE.UnbindEvent_UIElement_PreviewGotKeyboardFocus(_raisePreviewGotKeyboardFocus, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif

        _PreviewGotKeyboardFocus.Remove(swigCPtr.Handle);
      }
    }
  }

  internal delegate void RaisePreviewGotKeyboardFocusCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaisePreviewGotKeyboardFocusCallback _raisePreviewGotKeyboardFocus = RaisePreviewGotKeyboardFocus;

  [MonoPInvokeCallback(typeof(RaisePreviewGotKeyboardFocusCallback))]
  private static void RaisePreviewGotKeyboardFocus(IntPtr cPtr, IntPtr sender, IntPtr e) {
    if (!_PreviewGotKeyboardFocus.ContainsKey(cPtr)) {
      throw new System.Exception("Delegate not found");
    }
    if (sender == System.IntPtr.Zero && e == System.IntPtr.Zero) {
      _PreviewGotKeyboardFocus.Remove(cPtr);
      return;
    }
    PreviewGotKeyboardFocusHandler handler = _PreviewGotKeyboardFocus[cPtr];
    if (handler != null) {
      handler(Noesis.Extend.Unbox(Noesis.Extend.GetProxy(sender, false)), new KeyboardFocusChangedEventArgs(e, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, PreviewGotKeyboardFocusHandler> _PreviewGotKeyboardFocus =
      new System.Collections.Generic.Dictionary<System.IntPtr, PreviewGotKeyboardFocusHandler>();


  public delegate void PreviewKeyDownHandler(object sender, KeyEventArgs e);
  public event PreviewKeyDownHandler PreviewKeyDown {
    add {
      if (!_PreviewKeyDown.ContainsKey(swigCPtr.Handle)) {
        _PreviewKeyDown.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_UIElement_PreviewKeyDown(_raisePreviewKeyDown, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif
      }

      _PreviewKeyDown[swigCPtr.Handle] += value;
    }
    remove {
      if (!_PreviewKeyDown.ContainsKey(swigCPtr.Handle)) {
        throw new System.Exception("Delegate not found");
      }

      _PreviewKeyDown[swigCPtr.Handle] -= value;

      if (_PreviewKeyDown[swigCPtr.Handle] == null) {
        NoesisGUI_PINVOKE.UnbindEvent_UIElement_PreviewKeyDown(_raisePreviewKeyDown, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif

        _PreviewKeyDown.Remove(swigCPtr.Handle);
      }
    }
  }

  internal delegate void RaisePreviewKeyDownCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaisePreviewKeyDownCallback _raisePreviewKeyDown = RaisePreviewKeyDown;

  [MonoPInvokeCallback(typeof(RaisePreviewKeyDownCallback))]
  private static void RaisePreviewKeyDown(IntPtr cPtr, IntPtr sender, IntPtr e) {
    if (!_PreviewKeyDown.ContainsKey(cPtr)) {
      throw new System.Exception("Delegate not found");
    }
    if (sender == System.IntPtr.Zero && e == System.IntPtr.Zero) {
      _PreviewKeyDown.Remove(cPtr);
      return;
    }
    PreviewKeyDownHandler handler = _PreviewKeyDown[cPtr];
    if (handler != null) {
      handler(Noesis.Extend.Unbox(Noesis.Extend.GetProxy(sender, false)), new KeyEventArgs(e, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, PreviewKeyDownHandler> _PreviewKeyDown =
      new System.Collections.Generic.Dictionary<System.IntPtr, PreviewKeyDownHandler>();


  public delegate void PreviewKeyUpHandler(object sender, KeyEventArgs e);
  public event PreviewKeyUpHandler PreviewKeyUp {
    add {
      if (!_PreviewKeyUp.ContainsKey(swigCPtr.Handle)) {
        _PreviewKeyUp.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_UIElement_PreviewKeyUp(_raisePreviewKeyUp, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif
      }

      _PreviewKeyUp[swigCPtr.Handle] += value;
    }
    remove {
      if (!_PreviewKeyUp.ContainsKey(swigCPtr.Handle)) {
        throw new System.Exception("Delegate not found");
      }

      _PreviewKeyUp[swigCPtr.Handle] -= value;

      if (_PreviewKeyUp[swigCPtr.Handle] == null) {
        NoesisGUI_PINVOKE.UnbindEvent_UIElement_PreviewKeyUp(_raisePreviewKeyUp, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif

        _PreviewKeyUp.Remove(swigCPtr.Handle);
      }
    }
  }

  internal delegate void RaisePreviewKeyUpCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaisePreviewKeyUpCallback _raisePreviewKeyUp = RaisePreviewKeyUp;

  [MonoPInvokeCallback(typeof(RaisePreviewKeyUpCallback))]
  private static void RaisePreviewKeyUp(IntPtr cPtr, IntPtr sender, IntPtr e) {
    if (!_PreviewKeyUp.ContainsKey(cPtr)) {
      throw new System.Exception("Delegate not found");
    }
    if (sender == System.IntPtr.Zero && e == System.IntPtr.Zero) {
      _PreviewKeyUp.Remove(cPtr);
      return;
    }
    PreviewKeyUpHandler handler = _PreviewKeyUp[cPtr];
    if (handler != null) {
      handler(Noesis.Extend.Unbox(Noesis.Extend.GetProxy(sender, false)), new KeyEventArgs(e, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, PreviewKeyUpHandler> _PreviewKeyUp =
      new System.Collections.Generic.Dictionary<System.IntPtr, PreviewKeyUpHandler>();


  public delegate void PreviewLostKeyboardFocusHandler(object sender, KeyboardFocusChangedEventArgs e);
  public event PreviewLostKeyboardFocusHandler PreviewLostKeyboardFocus {
    add {
      if (!_PreviewLostKeyboardFocus.ContainsKey(swigCPtr.Handle)) {
        _PreviewLostKeyboardFocus.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_UIElement_PreviewLostKeyboardFocus(_raisePreviewLostKeyboardFocus, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif
      }

      _PreviewLostKeyboardFocus[swigCPtr.Handle] += value;
    }
    remove {
      if (!_PreviewLostKeyboardFocus.ContainsKey(swigCPtr.Handle)) {
        throw new System.Exception("Delegate not found");
      }

      _PreviewLostKeyboardFocus[swigCPtr.Handle] -= value;

      if (_PreviewLostKeyboardFocus[swigCPtr.Handle] == null) {
        NoesisGUI_PINVOKE.UnbindEvent_UIElement_PreviewLostKeyboardFocus(_raisePreviewLostKeyboardFocus, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif

        _PreviewLostKeyboardFocus.Remove(swigCPtr.Handle);
      }
    }
  }

  internal delegate void RaisePreviewLostKeyboardFocusCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaisePreviewLostKeyboardFocusCallback _raisePreviewLostKeyboardFocus = RaisePreviewLostKeyboardFocus;

  [MonoPInvokeCallback(typeof(RaisePreviewLostKeyboardFocusCallback))]
  private static void RaisePreviewLostKeyboardFocus(IntPtr cPtr, IntPtr sender, IntPtr e) {
    if (!_PreviewLostKeyboardFocus.ContainsKey(cPtr)) {
      throw new System.Exception("Delegate not found");
    }
    if (sender == System.IntPtr.Zero && e == System.IntPtr.Zero) {
      _PreviewLostKeyboardFocus.Remove(cPtr);
      return;
    }
    PreviewLostKeyboardFocusHandler handler = _PreviewLostKeyboardFocus[cPtr];
    if (handler != null) {
      handler(Noesis.Extend.Unbox(Noesis.Extend.GetProxy(sender, false)), new KeyboardFocusChangedEventArgs(e, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, PreviewLostKeyboardFocusHandler> _PreviewLostKeyboardFocus =
      new System.Collections.Generic.Dictionary<System.IntPtr, PreviewLostKeyboardFocusHandler>();


  public delegate void PreviewMouseDownHandler(object sender, MouseButtonEventArgs e);
  public event PreviewMouseDownHandler PreviewMouseDown {
    add {
      if (!_PreviewMouseDown.ContainsKey(swigCPtr.Handle)) {
        _PreviewMouseDown.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_UIElement_PreviewMouseDown(_raisePreviewMouseDown, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif
      }

      _PreviewMouseDown[swigCPtr.Handle] += value;
    }
    remove {
      if (!_PreviewMouseDown.ContainsKey(swigCPtr.Handle)) {
        throw new System.Exception("Delegate not found");
      }

      _PreviewMouseDown[swigCPtr.Handle] -= value;

      if (_PreviewMouseDown[swigCPtr.Handle] == null) {
        NoesisGUI_PINVOKE.UnbindEvent_UIElement_PreviewMouseDown(_raisePreviewMouseDown, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif

        _PreviewMouseDown.Remove(swigCPtr.Handle);
      }
    }
  }

  internal delegate void RaisePreviewMouseDownCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaisePreviewMouseDownCallback _raisePreviewMouseDown = RaisePreviewMouseDown;

  [MonoPInvokeCallback(typeof(RaisePreviewMouseDownCallback))]
  private static void RaisePreviewMouseDown(IntPtr cPtr, IntPtr sender, IntPtr e) {
    if (!_PreviewMouseDown.ContainsKey(cPtr)) {
      throw new System.Exception("Delegate not found");
    }
    if (sender == System.IntPtr.Zero && e == System.IntPtr.Zero) {
      _PreviewMouseDown.Remove(cPtr);
      return;
    }
    PreviewMouseDownHandler handler = _PreviewMouseDown[cPtr];
    if (handler != null) {
      handler(Noesis.Extend.Unbox(Noesis.Extend.GetProxy(sender, false)), new MouseButtonEventArgs(e, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, PreviewMouseDownHandler> _PreviewMouseDown =
      new System.Collections.Generic.Dictionary<System.IntPtr, PreviewMouseDownHandler>();


  public delegate void PreviewMouseLeftButtonDownHandler(object sender, MouseButtonEventArgs e);
  public event PreviewMouseLeftButtonDownHandler PreviewMouseLeftButtonDown {
    add {
      if (!_PreviewMouseLeftButtonDown.ContainsKey(swigCPtr.Handle)) {
        _PreviewMouseLeftButtonDown.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_UIElement_PreviewMouseLeftButtonDown(_raisePreviewMouseLeftButtonDown, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif
      }

      _PreviewMouseLeftButtonDown[swigCPtr.Handle] += value;
    }
    remove {
      if (!_PreviewMouseLeftButtonDown.ContainsKey(swigCPtr.Handle)) {
        throw new System.Exception("Delegate not found");
      }

      _PreviewMouseLeftButtonDown[swigCPtr.Handle] -= value;

      if (_PreviewMouseLeftButtonDown[swigCPtr.Handle] == null) {
        NoesisGUI_PINVOKE.UnbindEvent_UIElement_PreviewMouseLeftButtonDown(_raisePreviewMouseLeftButtonDown, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif

        _PreviewMouseLeftButtonDown.Remove(swigCPtr.Handle);
      }
    }
  }

  internal delegate void RaisePreviewMouseLeftButtonDownCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaisePreviewMouseLeftButtonDownCallback _raisePreviewMouseLeftButtonDown = RaisePreviewMouseLeftButtonDown;

  [MonoPInvokeCallback(typeof(RaisePreviewMouseLeftButtonDownCallback))]
  private static void RaisePreviewMouseLeftButtonDown(IntPtr cPtr, IntPtr sender, IntPtr e) {
    if (!_PreviewMouseLeftButtonDown.ContainsKey(cPtr)) {
      throw new System.Exception("Delegate not found");
    }
    if (sender == System.IntPtr.Zero && e == System.IntPtr.Zero) {
      _PreviewMouseLeftButtonDown.Remove(cPtr);
      return;
    }
    PreviewMouseLeftButtonDownHandler handler = _PreviewMouseLeftButtonDown[cPtr];
    if (handler != null) {
      handler(Noesis.Extend.Unbox(Noesis.Extend.GetProxy(sender, false)), new MouseButtonEventArgs(e, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, PreviewMouseLeftButtonDownHandler> _PreviewMouseLeftButtonDown =
      new System.Collections.Generic.Dictionary<System.IntPtr, PreviewMouseLeftButtonDownHandler>();


  public delegate void PreviewMouseLeftButtonUpHandler(object sender, MouseButtonEventArgs e);
  public event PreviewMouseLeftButtonUpHandler PreviewMouseLeftButtonUp {
    add {
      if (!_PreviewMouseLeftButtonUp.ContainsKey(swigCPtr.Handle)) {
        _PreviewMouseLeftButtonUp.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_UIElement_PreviewMouseLeftButtonUp(_raisePreviewMouseLeftButtonUp, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif
      }

      _PreviewMouseLeftButtonUp[swigCPtr.Handle] += value;
    }
    remove {
      if (!_PreviewMouseLeftButtonUp.ContainsKey(swigCPtr.Handle)) {
        throw new System.Exception("Delegate not found");
      }

      _PreviewMouseLeftButtonUp[swigCPtr.Handle] -= value;

      if (_PreviewMouseLeftButtonUp[swigCPtr.Handle] == null) {
        NoesisGUI_PINVOKE.UnbindEvent_UIElement_PreviewMouseLeftButtonUp(_raisePreviewMouseLeftButtonUp, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif

        _PreviewMouseLeftButtonUp.Remove(swigCPtr.Handle);
      }
    }
  }

  internal delegate void RaisePreviewMouseLeftButtonUpCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaisePreviewMouseLeftButtonUpCallback _raisePreviewMouseLeftButtonUp = RaisePreviewMouseLeftButtonUp;

  [MonoPInvokeCallback(typeof(RaisePreviewMouseLeftButtonUpCallback))]
  private static void RaisePreviewMouseLeftButtonUp(IntPtr cPtr, IntPtr sender, IntPtr e) {
    if (!_PreviewMouseLeftButtonUp.ContainsKey(cPtr)) {
      throw new System.Exception("Delegate not found");
    }
    if (sender == System.IntPtr.Zero && e == System.IntPtr.Zero) {
      _PreviewMouseLeftButtonUp.Remove(cPtr);
      return;
    }
    PreviewMouseLeftButtonUpHandler handler = _PreviewMouseLeftButtonUp[cPtr];
    if (handler != null) {
      handler(Noesis.Extend.Unbox(Noesis.Extend.GetProxy(sender, false)), new MouseButtonEventArgs(e, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, PreviewMouseLeftButtonUpHandler> _PreviewMouseLeftButtonUp =
      new System.Collections.Generic.Dictionary<System.IntPtr, PreviewMouseLeftButtonUpHandler>();


  public delegate void PreviewMouseMoveHandler(object sender, MouseEventArgs e);
  public event PreviewMouseMoveHandler PreviewMouseMove {
    add {
      if (!_PreviewMouseMove.ContainsKey(swigCPtr.Handle)) {
        _PreviewMouseMove.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_UIElement_PreviewMouseMove(_raisePreviewMouseMove, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif
      }

      _PreviewMouseMove[swigCPtr.Handle] += value;
    }
    remove {
      if (!_PreviewMouseMove.ContainsKey(swigCPtr.Handle)) {
        throw new System.Exception("Delegate not found");
      }

      _PreviewMouseMove[swigCPtr.Handle] -= value;

      if (_PreviewMouseMove[swigCPtr.Handle] == null) {
        NoesisGUI_PINVOKE.UnbindEvent_UIElement_PreviewMouseMove(_raisePreviewMouseMove, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif

        _PreviewMouseMove.Remove(swigCPtr.Handle);
      }
    }
  }

  internal delegate void RaisePreviewMouseMoveCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaisePreviewMouseMoveCallback _raisePreviewMouseMove = RaisePreviewMouseMove;

  [MonoPInvokeCallback(typeof(RaisePreviewMouseMoveCallback))]
  private static void RaisePreviewMouseMove(IntPtr cPtr, IntPtr sender, IntPtr e) {
    if (!_PreviewMouseMove.ContainsKey(cPtr)) {
      throw new System.Exception("Delegate not found");
    }
    if (sender == System.IntPtr.Zero && e == System.IntPtr.Zero) {
      _PreviewMouseMove.Remove(cPtr);
      return;
    }
    PreviewMouseMoveHandler handler = _PreviewMouseMove[cPtr];
    if (handler != null) {
      handler(Noesis.Extend.Unbox(Noesis.Extend.GetProxy(sender, false)), new MouseEventArgs(e, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, PreviewMouseMoveHandler> _PreviewMouseMove =
      new System.Collections.Generic.Dictionary<System.IntPtr, PreviewMouseMoveHandler>();


  public delegate void PreviewMouseRightButtonDownHandler(object sender, MouseButtonEventArgs e);
  public event PreviewMouseRightButtonDownHandler PreviewMouseRightButtonDown {
    add {
      if (!_PreviewMouseRightButtonDown.ContainsKey(swigCPtr.Handle)) {
        _PreviewMouseRightButtonDown.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_UIElement_PreviewMouseRightButtonDown(_raisePreviewMouseRightButtonDown, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif
      }

      _PreviewMouseRightButtonDown[swigCPtr.Handle] += value;
    }
    remove {
      if (!_PreviewMouseRightButtonDown.ContainsKey(swigCPtr.Handle)) {
        throw new System.Exception("Delegate not found");
      }

      _PreviewMouseRightButtonDown[swigCPtr.Handle] -= value;

      if (_PreviewMouseRightButtonDown[swigCPtr.Handle] == null) {
        NoesisGUI_PINVOKE.UnbindEvent_UIElement_PreviewMouseRightButtonDown(_raisePreviewMouseRightButtonDown, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif

        _PreviewMouseRightButtonDown.Remove(swigCPtr.Handle);
      }
    }
  }

  internal delegate void RaisePreviewMouseRightButtonDownCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaisePreviewMouseRightButtonDownCallback _raisePreviewMouseRightButtonDown = RaisePreviewMouseRightButtonDown;

  [MonoPInvokeCallback(typeof(RaisePreviewMouseRightButtonDownCallback))]
  private static void RaisePreviewMouseRightButtonDown(IntPtr cPtr, IntPtr sender, IntPtr e) {
    if (!_PreviewMouseRightButtonDown.ContainsKey(cPtr)) {
      throw new System.Exception("Delegate not found");
    }
    if (sender == System.IntPtr.Zero && e == System.IntPtr.Zero) {
      _PreviewMouseRightButtonDown.Remove(cPtr);
      return;
    }
    PreviewMouseRightButtonDownHandler handler = _PreviewMouseRightButtonDown[cPtr];
    if (handler != null) {
      handler(Noesis.Extend.Unbox(Noesis.Extend.GetProxy(sender, false)), new MouseButtonEventArgs(e, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, PreviewMouseRightButtonDownHandler> _PreviewMouseRightButtonDown =
      new System.Collections.Generic.Dictionary<System.IntPtr, PreviewMouseRightButtonDownHandler>();


  public delegate void PreviewMouseRightButtonUpHandler(object sender, MouseButtonEventArgs e);
  public event PreviewMouseRightButtonUpHandler PreviewMouseRightButtonUp {
    add {
      if (!_PreviewMouseRightButtonUp.ContainsKey(swigCPtr.Handle)) {
        _PreviewMouseRightButtonUp.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_UIElement_PreviewMouseRightButtonUp(_raisePreviewMouseRightButtonUp, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif
      }

      _PreviewMouseRightButtonUp[swigCPtr.Handle] += value;
    }
    remove {
      if (!_PreviewMouseRightButtonUp.ContainsKey(swigCPtr.Handle)) {
        throw new System.Exception("Delegate not found");
      }

      _PreviewMouseRightButtonUp[swigCPtr.Handle] -= value;

      if (_PreviewMouseRightButtonUp[swigCPtr.Handle] == null) {
        NoesisGUI_PINVOKE.UnbindEvent_UIElement_PreviewMouseRightButtonUp(_raisePreviewMouseRightButtonUp, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif

        _PreviewMouseRightButtonUp.Remove(swigCPtr.Handle);
      }
    }
  }

  internal delegate void RaisePreviewMouseRightButtonUpCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaisePreviewMouseRightButtonUpCallback _raisePreviewMouseRightButtonUp = RaisePreviewMouseRightButtonUp;

  [MonoPInvokeCallback(typeof(RaisePreviewMouseRightButtonUpCallback))]
  private static void RaisePreviewMouseRightButtonUp(IntPtr cPtr, IntPtr sender, IntPtr e) {
    if (!_PreviewMouseRightButtonUp.ContainsKey(cPtr)) {
      throw new System.Exception("Delegate not found");
    }
    if (sender == System.IntPtr.Zero && e == System.IntPtr.Zero) {
      _PreviewMouseRightButtonUp.Remove(cPtr);
      return;
    }
    PreviewMouseRightButtonUpHandler handler = _PreviewMouseRightButtonUp[cPtr];
    if (handler != null) {
      handler(Noesis.Extend.Unbox(Noesis.Extend.GetProxy(sender, false)), new MouseButtonEventArgs(e, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, PreviewMouseRightButtonUpHandler> _PreviewMouseRightButtonUp =
      new System.Collections.Generic.Dictionary<System.IntPtr, PreviewMouseRightButtonUpHandler>();


  public delegate void PreviewMouseUpHandler(object sender, MouseButtonEventArgs e);
  public event PreviewMouseUpHandler PreviewMouseUp {
    add {
      if (!_PreviewMouseUp.ContainsKey(swigCPtr.Handle)) {
        _PreviewMouseUp.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_UIElement_PreviewMouseUp(_raisePreviewMouseUp, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif
      }

      _PreviewMouseUp[swigCPtr.Handle] += value;
    }
    remove {
      if (!_PreviewMouseUp.ContainsKey(swigCPtr.Handle)) {
        throw new System.Exception("Delegate not found");
      }

      _PreviewMouseUp[swigCPtr.Handle] -= value;

      if (_PreviewMouseUp[swigCPtr.Handle] == null) {
        NoesisGUI_PINVOKE.UnbindEvent_UIElement_PreviewMouseUp(_raisePreviewMouseUp, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif

        _PreviewMouseUp.Remove(swigCPtr.Handle);
      }
    }
  }

  internal delegate void RaisePreviewMouseUpCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaisePreviewMouseUpCallback _raisePreviewMouseUp = RaisePreviewMouseUp;

  [MonoPInvokeCallback(typeof(RaisePreviewMouseUpCallback))]
  private static void RaisePreviewMouseUp(IntPtr cPtr, IntPtr sender, IntPtr e) {
    if (!_PreviewMouseUp.ContainsKey(cPtr)) {
      throw new System.Exception("Delegate not found");
    }
    if (sender == System.IntPtr.Zero && e == System.IntPtr.Zero) {
      _PreviewMouseUp.Remove(cPtr);
      return;
    }
    PreviewMouseUpHandler handler = _PreviewMouseUp[cPtr];
    if (handler != null) {
      handler(Noesis.Extend.Unbox(Noesis.Extend.GetProxy(sender, false)), new MouseButtonEventArgs(e, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, PreviewMouseUpHandler> _PreviewMouseUp =
      new System.Collections.Generic.Dictionary<System.IntPtr, PreviewMouseUpHandler>();


  public delegate void PreviewMouseWheelHandler(object sender, MouseWheelEventArgs e);
  public event PreviewMouseWheelHandler PreviewMouseWheel {
    add {
      if (!_PreviewMouseWheel.ContainsKey(swigCPtr.Handle)) {
        _PreviewMouseWheel.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_UIElement_PreviewMouseWheel(_raisePreviewMouseWheel, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif
      }

      _PreviewMouseWheel[swigCPtr.Handle] += value;
    }
    remove {
      if (!_PreviewMouseWheel.ContainsKey(swigCPtr.Handle)) {
        throw new System.Exception("Delegate not found");
      }

      _PreviewMouseWheel[swigCPtr.Handle] -= value;

      if (_PreviewMouseWheel[swigCPtr.Handle] == null) {
        NoesisGUI_PINVOKE.UnbindEvent_UIElement_PreviewMouseWheel(_raisePreviewMouseWheel, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif

        _PreviewMouseWheel.Remove(swigCPtr.Handle);
      }
    }
  }

  internal delegate void RaisePreviewMouseWheelCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaisePreviewMouseWheelCallback _raisePreviewMouseWheel = RaisePreviewMouseWheel;

  [MonoPInvokeCallback(typeof(RaisePreviewMouseWheelCallback))]
  private static void RaisePreviewMouseWheel(IntPtr cPtr, IntPtr sender, IntPtr e) {
    if (!_PreviewMouseWheel.ContainsKey(cPtr)) {
      throw new System.Exception("Delegate not found");
    }
    if (sender == System.IntPtr.Zero && e == System.IntPtr.Zero) {
      _PreviewMouseWheel.Remove(cPtr);
      return;
    }
    PreviewMouseWheelHandler handler = _PreviewMouseWheel[cPtr];
    if (handler != null) {
      handler(Noesis.Extend.Unbox(Noesis.Extend.GetProxy(sender, false)), new MouseWheelEventArgs(e, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, PreviewMouseWheelHandler> _PreviewMouseWheel =
      new System.Collections.Generic.Dictionary<System.IntPtr, PreviewMouseWheelHandler>();


  public delegate void PreviewQueryContinueDragHandler(object sender, QueryContinueDragEventArgs e);
  public event PreviewQueryContinueDragHandler PreviewQueryContinueDrag {
    add {
      if (!_PreviewQueryContinueDrag.ContainsKey(swigCPtr.Handle)) {
        _PreviewQueryContinueDrag.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_UIElement_PreviewQueryContinueDrag(_raisePreviewQueryContinueDrag, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif
      }

      _PreviewQueryContinueDrag[swigCPtr.Handle] += value;
    }
    remove {
      if (!_PreviewQueryContinueDrag.ContainsKey(swigCPtr.Handle)) {
        throw new System.Exception("Delegate not found");
      }

      _PreviewQueryContinueDrag[swigCPtr.Handle] -= value;

      if (_PreviewQueryContinueDrag[swigCPtr.Handle] == null) {
        NoesisGUI_PINVOKE.UnbindEvent_UIElement_PreviewQueryContinueDrag(_raisePreviewQueryContinueDrag, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif

        _PreviewQueryContinueDrag.Remove(swigCPtr.Handle);
      }
    }
  }

  internal delegate void RaisePreviewQueryContinueDragCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaisePreviewQueryContinueDragCallback _raisePreviewQueryContinueDrag = RaisePreviewQueryContinueDrag;

  [MonoPInvokeCallback(typeof(RaisePreviewQueryContinueDragCallback))]
  private static void RaisePreviewQueryContinueDrag(IntPtr cPtr, IntPtr sender, IntPtr e) {
    if (!_PreviewQueryContinueDrag.ContainsKey(cPtr)) {
      throw new System.Exception("Delegate not found");
    }
    if (sender == System.IntPtr.Zero && e == System.IntPtr.Zero) {
      _PreviewQueryContinueDrag.Remove(cPtr);
      return;
    }
    PreviewQueryContinueDragHandler handler = _PreviewQueryContinueDrag[cPtr];
    if (handler != null) {
      handler(Noesis.Extend.Unbox(Noesis.Extend.GetProxy(sender, false)), new QueryContinueDragEventArgs(e, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, PreviewQueryContinueDragHandler> _PreviewQueryContinueDrag =
      new System.Collections.Generic.Dictionary<System.IntPtr, PreviewQueryContinueDragHandler>();


  public delegate void PreviewTextInputHandler(object sender, TextCompositionEventArgs e);
  public event PreviewTextInputHandler PreviewTextInput {
    add {
      if (!_PreviewTextInput.ContainsKey(swigCPtr.Handle)) {
        _PreviewTextInput.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_UIElement_PreviewTextInput(_raisePreviewTextInput, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif
      }

      _PreviewTextInput[swigCPtr.Handle] += value;
    }
    remove {
      if (!_PreviewTextInput.ContainsKey(swigCPtr.Handle)) {
        throw new System.Exception("Delegate not found");
      }

      _PreviewTextInput[swigCPtr.Handle] -= value;

      if (_PreviewTextInput[swigCPtr.Handle] == null) {
        NoesisGUI_PINVOKE.UnbindEvent_UIElement_PreviewTextInput(_raisePreviewTextInput, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif

        _PreviewTextInput.Remove(swigCPtr.Handle);
      }
    }
  }

  internal delegate void RaisePreviewTextInputCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaisePreviewTextInputCallback _raisePreviewTextInput = RaisePreviewTextInput;

  [MonoPInvokeCallback(typeof(RaisePreviewTextInputCallback))]
  private static void RaisePreviewTextInput(IntPtr cPtr, IntPtr sender, IntPtr e) {
    if (!_PreviewTextInput.ContainsKey(cPtr)) {
      throw new System.Exception("Delegate not found");
    }
    if (sender == System.IntPtr.Zero && e == System.IntPtr.Zero) {
      _PreviewTextInput.Remove(cPtr);
      return;
    }
    PreviewTextInputHandler handler = _PreviewTextInput[cPtr];
    if (handler != null) {
      handler(Noesis.Extend.Unbox(Noesis.Extend.GetProxy(sender, false)), new TextCompositionEventArgs(e, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, PreviewTextInputHandler> _PreviewTextInput =
      new System.Collections.Generic.Dictionary<System.IntPtr, PreviewTextInputHandler>();


  public delegate void QueryContinueDragHandler(object sender, QueryContinueDragEventArgs e);
  public event QueryContinueDragHandler QueryContinueDrag {
    add {
      if (!_QueryContinueDrag.ContainsKey(swigCPtr.Handle)) {
        _QueryContinueDrag.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_UIElement_QueryContinueDrag(_raiseQueryContinueDrag, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif
      }

      _QueryContinueDrag[swigCPtr.Handle] += value;
    }
    remove {
      if (!_QueryContinueDrag.ContainsKey(swigCPtr.Handle)) {
        throw new System.Exception("Delegate not found");
      }

      _QueryContinueDrag[swigCPtr.Handle] -= value;

      if (_QueryContinueDrag[swigCPtr.Handle] == null) {
        NoesisGUI_PINVOKE.UnbindEvent_UIElement_QueryContinueDrag(_raiseQueryContinueDrag, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif

        _QueryContinueDrag.Remove(swigCPtr.Handle);
      }
    }
  }

  internal delegate void RaiseQueryContinueDragCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaiseQueryContinueDragCallback _raiseQueryContinueDrag = RaiseQueryContinueDrag;

  [MonoPInvokeCallback(typeof(RaiseQueryContinueDragCallback))]
  private static void RaiseQueryContinueDrag(IntPtr cPtr, IntPtr sender, IntPtr e) {
    if (!_QueryContinueDrag.ContainsKey(cPtr)) {
      throw new System.Exception("Delegate not found");
    }
    if (sender == System.IntPtr.Zero && e == System.IntPtr.Zero) {
      _QueryContinueDrag.Remove(cPtr);
      return;
    }
    QueryContinueDragHandler handler = _QueryContinueDrag[cPtr];
    if (handler != null) {
      handler(Noesis.Extend.Unbox(Noesis.Extend.GetProxy(sender, false)), new QueryContinueDragEventArgs(e, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, QueryContinueDragHandler> _QueryContinueDrag =
      new System.Collections.Generic.Dictionary<System.IntPtr, QueryContinueDragHandler>();


  public delegate void QueryCursorHandler(object sender, QueryCursorEventArgs e);
  public event QueryCursorHandler QueryCursor {
    add {
      if (!_QueryCursor.ContainsKey(swigCPtr.Handle)) {
        _QueryCursor.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_UIElement_QueryCursor(_raiseQueryCursor, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif
      }

      _QueryCursor[swigCPtr.Handle] += value;
    }
    remove {
      if (!_QueryCursor.ContainsKey(swigCPtr.Handle)) {
        throw new System.Exception("Delegate not found");
      }

      _QueryCursor[swigCPtr.Handle] -= value;

      if (_QueryCursor[swigCPtr.Handle] == null) {
        NoesisGUI_PINVOKE.UnbindEvent_UIElement_QueryCursor(_raiseQueryCursor, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif

        _QueryCursor.Remove(swigCPtr.Handle);
      }
    }
  }

  internal delegate void RaiseQueryCursorCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaiseQueryCursorCallback _raiseQueryCursor = RaiseQueryCursor;

  [MonoPInvokeCallback(typeof(RaiseQueryCursorCallback))]
  private static void RaiseQueryCursor(IntPtr cPtr, IntPtr sender, IntPtr e) {
    if (!_QueryCursor.ContainsKey(cPtr)) {
      throw new System.Exception("Delegate not found");
    }
    if (sender == System.IntPtr.Zero && e == System.IntPtr.Zero) {
      _QueryCursor.Remove(cPtr);
      return;
    }
    QueryCursorHandler handler = _QueryCursor[cPtr];
    if (handler != null) {
      handler(Noesis.Extend.Unbox(Noesis.Extend.GetProxy(sender, false)), new QueryCursorEventArgs(e, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, QueryCursorHandler> _QueryCursor =
      new System.Collections.Generic.Dictionary<System.IntPtr, QueryCursorHandler>();


  public delegate void TextInputHandler(object sender, TextCompositionEventArgs e);
  public event TextInputHandler TextInput {
    add {
      if (!_TextInput.ContainsKey(swigCPtr.Handle)) {
        _TextInput.Add(swigCPtr.Handle, null);

        NoesisGUI_PINVOKE.BindEvent_UIElement_TextInput(_raiseTextInput, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif
      }

      _TextInput[swigCPtr.Handle] += value;
    }
    remove {
      if (!_TextInput.ContainsKey(swigCPtr.Handle)) {
        throw new System.Exception("Delegate not found");
      }

      _TextInput[swigCPtr.Handle] -= value;

      if (_TextInput[swigCPtr.Handle] == null) {
        NoesisGUI_PINVOKE.UnbindEvent_UIElement_TextInput(_raiseTextInput, swigCPtr.Handle);
        #if UNITY_EDITOR || NOESIS_API
        if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
        #endif

        _TextInput.Remove(swigCPtr.Handle);
      }
    }
  }

  internal delegate void RaiseTextInputCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaiseTextInputCallback _raiseTextInput = RaiseTextInput;

  [MonoPInvokeCallback(typeof(RaiseTextInputCallback))]
  private static void RaiseTextInput(IntPtr cPtr, IntPtr sender, IntPtr e) {
    if (!_TextInput.ContainsKey(cPtr)) {
      throw new System.Exception("Delegate not found");
    }
    if (sender == System.IntPtr.Zero && e == System.IntPtr.Zero) {
      _TextInput.Remove(cPtr);
      return;
    }
    TextInputHandler handler = _TextInput[cPtr];
    if (handler != null) {
      handler(Noesis.Extend.Unbox(Noesis.Extend.GetProxy(sender, false)), new TextCompositionEventArgs(e, false));
    }
  }

  static System.Collections.Generic.Dictionary<System.IntPtr, TextInputHandler> _TextInput =
      new System.Collections.Generic.Dictionary<System.IntPtr, TextInputHandler>();


  public UIElement() {
  }

  protected override System.IntPtr CreateCPtr(System.Type type) {
    if (type == typeof(UIElement)) {
      return NoesisGUI_PINVOKE.new_UIElement();
    }
    else {
      return base.CreateCPtr(type);
    }
  }

  public bool CaptureMouse() {
    bool ret = NoesisGUI_PINVOKE.UIElement_CaptureMouse(swigCPtr);
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void ReleaseMouseCapture() {
    NoesisGUI_PINVOKE.UIElement_ReleaseMouseCapture(swigCPtr);
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public bool CaptureTouch(uint touchDevice) {
    bool ret = NoesisGUI_PINVOKE.UIElement_CaptureTouch(swigCPtr, touchDevice);
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public bool ReleaseTouchCapture(uint touchDevice) {
    bool ret = NoesisGUI_PINVOKE.UIElement_ReleaseTouchCapture(swigCPtr, touchDevice);
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void ReleaseAllTouchCaptures() {
    NoesisGUI_PINVOKE.UIElement_ReleaseAllTouchCaptures(swigCPtr);
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public bool Focus() {
    bool ret = NoesisGUI_PINVOKE.UIElement_Focus(swigCPtr);
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void InvalidateMeasure() {
    NoesisGUI_PINVOKE.UIElement_InvalidateMeasure(swigCPtr);
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public bool IsMeasureValid() {
    bool ret = NoesisGUI_PINVOKE.UIElement_IsMeasureValid(swigCPtr);
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void Measure(Size availableSize) {
    NoesisGUI_PINVOKE.UIElement_Measure(swigCPtr, availableSize);
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public void InvalidateArrange() {
    NoesisGUI_PINVOKE.UIElement_InvalidateArrange(swigCPtr);
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public bool IsArrangeValid() {
    bool ret = NoesisGUI_PINVOKE.UIElement_IsArrangeValid(swigCPtr);
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public void Arrange(Rect finalRect) {
    NoesisGUI_PINVOKE.UIElement_Arrange(swigCPtr, finalRect);
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public void InvalidateVisual() {
    NoesisGUI_PINVOKE.UIElement_InvalidateVisual(swigCPtr);
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public void UpdateLayout() {
    NoesisGUI_PINVOKE.UIElement_UpdateLayout(swigCPtr);
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
  }

  public Mouse GetMouse() {
    IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_GetMouse(swigCPtr);
    Mouse ret = (cPtr == IntPtr.Zero) ? null : new Mouse(cPtr, false);
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public Keyboard GetKeyboard() {
    IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_GetKeyboard(swigCPtr);
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return Noesis.Extend.GetProxy(cPtr, false) as Keyboard;
  }

  public virtual DependencyObject PredictFocus(FocusNavigationDirection direction) {
    IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_PredictFocus(swigCPtr, (int)direction);
    DependencyObject ret = (cPtr == IntPtr.Zero) ? null : new DependencyObject(cPtr, false);
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }

  public virtual Size GetMeasureConstraint() {
    IntPtr ret = NoesisGUI_PINVOKE.UIElement_GetMeasureConstraint(swigCPtr);
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    if (ret != IntPtr.Zero) {
      Size jret = Marshal.PtrToStructure<Size>(ret);
      return jret;
    }
    else {
      return new Size();
    }
  }

  public virtual Rect GetArrangeConstraint() {
    IntPtr ret = NoesisGUI_PINVOKE.UIElement_GetArrangeConstraint(swigCPtr);
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    if (ret != IntPtr.Zero) {
      Rect jret = Marshal.PtrToStructure<Rect>(ret);
      return jret;
    }
    else {
      return new Rect();
    }
  }

  public static DependencyProperty AllowDropProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_AllowDropProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty ClipProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_ClipProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty ClipToBoundsProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_ClipToBoundsProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty FocusableProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_FocusableProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty IsEnabledProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_IsEnabledProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty IsFocusedProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_IsFocusedProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty IsHitTestVisibleProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_IsHitTestVisibleProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty IsKeyboardFocusedProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_IsKeyboardFocusedProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty IsKeyboardFocusWithinProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_IsKeyboardFocusWithinProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty IsMouseCapturedProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_IsMouseCapturedProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty IsMouseCaptureWithinProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_IsMouseCaptureWithinProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty IsMouseDirectlyOverProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_IsMouseDirectlyOverProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty IsMouseOverProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_IsMouseOverProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty IsManipulationEnabledProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_IsManipulationEnabledProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty IsVisibleProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_IsVisibleProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty OpacityMaskProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_OpacityMaskProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty OpacityProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_OpacityProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty ProjectionProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_ProjectionProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty RenderTransformOriginProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_RenderTransformOriginProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty RenderTransformProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_RenderTransformProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public static DependencyProperty VisibilityProperty {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_VisibilityProperty_get();
      DependencyProperty ret = (cPtr == IntPtr.Zero) ? null : new DependencyProperty(cPtr, false);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public bool AllowDrop {
    set {
      NoesisGUI_PINVOKE.UIElement_AllowDrop_set(swigCPtr, value);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      bool ret = NoesisGUI_PINVOKE.UIElement_AllowDrop_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public Geometry Clip {
    set {
      NoesisGUI_PINVOKE.UIElement_Clip_set(swigCPtr, Geometry.getCPtr(value));
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_Clip_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return Noesis.Extend.GetProxy(cPtr, false) as Geometry;
    }
  
  }

  public bool ClipToBounds {
    set {
      NoesisGUI_PINVOKE.UIElement_ClipToBounds_set(swigCPtr, value);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      bool ret = NoesisGUI_PINVOKE.UIElement_ClipToBounds_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public bool Focusable {
    set {
      NoesisGUI_PINVOKE.UIElement_Focusable_set(swigCPtr, value);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      bool ret = NoesisGUI_PINVOKE.UIElement_Focusable_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public bool IsEnabled {
    set {
      NoesisGUI_PINVOKE.UIElement_IsEnabled_set(swigCPtr, value);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      bool ret = NoesisGUI_PINVOKE.UIElement_IsEnabled_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public bool IsFocused {
    get {
      bool ret = NoesisGUI_PINVOKE.UIElement_IsFocused_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public bool IsHitTestVisible {
    set {
      NoesisGUI_PINVOKE.UIElement_IsHitTestVisible_set(swigCPtr, value);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      bool ret = NoesisGUI_PINVOKE.UIElement_IsHitTestVisible_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public bool IsKeyboardFocused {
    get {
      bool ret = NoesisGUI_PINVOKE.UIElement_IsKeyboardFocused_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public bool IsKeyboardFocusWithin {
    get {
      bool ret = NoesisGUI_PINVOKE.UIElement_IsKeyboardFocusWithin_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public bool IsMouseCaptured {
    get {
      bool ret = NoesisGUI_PINVOKE.UIElement_IsMouseCaptured_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public bool IsMouseCaptureWithin {
    get {
      bool ret = NoesisGUI_PINVOKE.UIElement_IsMouseCaptureWithin_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public bool IsMouseDirectlyOver {
    get {
      bool ret = NoesisGUI_PINVOKE.UIElement_IsMouseDirectlyOver_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public bool IsMouseOver {
    get {
      bool ret = NoesisGUI_PINVOKE.UIElement_IsMouseOver_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public bool IsManipulationEnabled {
    set {
      NoesisGUI_PINVOKE.UIElement_IsManipulationEnabled_set(swigCPtr, value);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      bool ret = NoesisGUI_PINVOKE.UIElement_IsManipulationEnabled_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public bool IsVisible {
    get {
      bool ret = NoesisGUI_PINVOKE.UIElement_IsVisible_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public Brush OpacityMask {
    set {
      NoesisGUI_PINVOKE.UIElement_OpacityMask_set(swigCPtr, Brush.getCPtr(value));
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_OpacityMask_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return Noesis.Extend.GetProxy(cPtr, false) as Brush;
    }
  
  }

  public float Opacity {
    set {
      NoesisGUI_PINVOKE.UIElement_Opacity_set(swigCPtr, value);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      float ret = NoesisGUI_PINVOKE.UIElement_Opacity_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public Projection Projection {
    set {
      NoesisGUI_PINVOKE.UIElement_Projection_set(swigCPtr, Projection.getCPtr(value));
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_Projection_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return Noesis.Extend.GetProxy(cPtr, false) as Projection;
    }
  
  }

  public Point RenderTransformOrigin {
    set {
      NoesisGUI_PINVOKE.UIElement_RenderTransformOrigin_set(swigCPtr, value);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    }

    get {
      IntPtr ret = NoesisGUI_PINVOKE.UIElement_RenderTransformOrigin_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      if (ret != IntPtr.Zero) {
        Point jret = Marshal.PtrToStructure<Point>(ret);
        return jret;
      }
      else {
        return new Point();
      }
    }

  }

  public Transform RenderTransform {
    set {
      NoesisGUI_PINVOKE.UIElement_RenderTransform_set(swigCPtr, Transform.getCPtr(value));
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_RenderTransform_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return Noesis.Extend.GetProxy(cPtr, false) as Transform;
    }
  
  }

  public Visibility Visibility {
    set {
      NoesisGUI_PINVOKE.UIElement_Visibility_set(swigCPtr, (int)value);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
    } 
    get {
      Visibility ret = (Visibility)NoesisGUI_PINVOKE.UIElement_Visibility_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return ret;
    } 
  }

  public CommandBindingCollection CommandBindings {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_CommandBindings_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return Noesis.Extend.GetProxy(cPtr, false) as CommandBindingCollection;
    }
  
  }

  public InputBindingCollection InputBindings {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.UIElement_InputBindings_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      return Noesis.Extend.GetProxy(cPtr, false) as InputBindingCollection;
    }
  
  }

  public Size DesiredSize {
    get {
      IntPtr ret = NoesisGUI_PINVOKE.UIElement_DesiredSize_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      if (ret != IntPtr.Zero) {
        Size jret = Marshal.PtrToStructure<Size>(ret);
        return jret;
      }
      else {
        return new Size();
      }
    }

  }

  public Size RenderSize {
    get {
      IntPtr ret = NoesisGUI_PINVOKE.UIElement_RenderSize_get(swigCPtr);
      #if UNITY_EDITOR || NOESIS_API
      if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
      #endif
      if (ret != IntPtr.Zero) {
        Size jret = Marshal.PtrToStructure<Size>(ret);
        return jret;
      }
      else {
        return new Size();
      }
    }

  }

  new internal static IntPtr GetStaticType() {
    IntPtr ret = NoesisGUI_PINVOKE.UIElement_GetStaticType();
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return ret;
  }


  internal new static IntPtr Extend(System.Type type) {
    IntPtr unityType = Noesis.Extend.GetPtrForType(type);
    IntPtr nativeType = NoesisGUI_PINVOKE.Extend_UIElement(unityType);
    #if UNITY_EDITOR || NOESIS_API
    if (NoesisGUI_PINVOKE.SWIGPendingException.Pending) throw NoesisGUI_PINVOKE.SWIGPendingException.Retrieve();
    #endif
    return nativeType;
  }
}

}

